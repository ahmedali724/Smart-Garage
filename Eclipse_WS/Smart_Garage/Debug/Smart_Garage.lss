
Smart_Garage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003836  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00003836  000038ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000b6  008000b6  00003920  2**0
                  ALLOC
  3 .stab         00003c9c  00000000  00000000  00003920  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002e74  00000000  00000000  000075bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c329  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000dfc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e124  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e3b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eb7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__vector_1>
       8:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__vector_2>
       c:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_10>
      2c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3b       	cpi	r26, 0xBF	; 191
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 71 18 	call	0x30e2	; 0x30e2 <main>
      8a:	0c 94 19 1c 	jmp	0x3832	; 0x3832 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ea       	ldi	r26, 0xA3	; 163
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 ea       	ldi	r24, 0xA3	; 163
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
     b70:	80 91 b6 00 	lds	r24, 0x00B6
     b74:	90 91 b7 00 	lds	r25, 0x00B7
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
     b7c:	e0 91 b6 00 	lds	r30, 0x00B6
     b80:	f0 91 b7 00 	lds	r31, 0x00B7
     b84:	09 95       	icall
	}
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
     bd6:	80 91 b6 00 	lds	r24, 0x00B6
     bda:	90 91 b7 00 	lds	r25, 0x00B7
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	29 f0       	breq	.+10     	; 0xbec <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
     be2:	e0 91 b6 00 	lds	r30, 0x00B6
     be6:	f0 91 b7 00 	lds	r31, 0x00B7
     bea:	09 95       	icall
	}
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <Timer0_init>:
/*
 * Description :
 * Function to initialize the Timer driver.
 */
void Timer0_init(const TIMER0_ConfigType *Config_Ptr)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <Timer0_init+0x6>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	 ***********************************************************************/

	/*
	 * insert the required mode in WGM bits (WGM00 and WGM01) of TCCR0 Register
	 */
	if (Config_Ptr->mode == NORMAL_MODE)
     c20:	e9 81       	ldd	r30, Y+1	; 0x01
     c22:	fa 81       	ldd	r31, Y+2	; 0x02
     c24:	82 81       	ldd	r24, Z+2	; 0x02
     c26:	88 23       	and	r24, r24
     c28:	79 f4       	brne	.+30     	; 0xc48 <Timer0_init+0x36>
	{
		TCCR0_REG.Bits.FOC0_Bit = 1;
     c2a:	e3 e5       	ldi	r30, 0x53	; 83
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	80 68       	ori	r24, 0x80	; 128
     c32:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM00_Bit = 0;
     c34:	e3 e5       	ldi	r30, 0x53	; 83
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	8f 7b       	andi	r24, 0xBF	; 191
     c3c:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM01_Bit = 0;
     c3e:	e3 e5       	ldi	r30, 0x53	; 83
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	87 7f       	andi	r24, 0xF7	; 247
     c46:	80 83       	st	Z, r24
	}
	if (Config_Ptr->mode == CTC_MODE)
     c48:	e9 81       	ldd	r30, Y+1	; 0x01
     c4a:	fa 81       	ldd	r31, Y+2	; 0x02
     c4c:	82 81       	ldd	r24, Z+2	; 0x02
     c4e:	82 30       	cpi	r24, 0x02	; 2
     c50:	79 f4       	brne	.+30     	; 0xc70 <Timer0_init+0x5e>
	{
		TCCR0_REG.Bits.FOC0_Bit = 1;
     c52:	e3 e5       	ldi	r30, 0x53	; 83
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	80 68       	ori	r24, 0x80	; 128
     c5a:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM00_Bit = 0;
     c5c:	e3 e5       	ldi	r30, 0x53	; 83
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	8f 7b       	andi	r24, 0xBF	; 191
     c64:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM01_Bit = 1;
     c66:	e3 e5       	ldi	r30, 0x53	; 83
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	88 60       	ori	r24, 0x08	; 8
     c6e:	80 83       	st	Z, r24
	}
	if (Config_Ptr->mode == FAST_PWM_MODE)
     c70:	e9 81       	ldd	r30, Y+1	; 0x01
     c72:	fa 81       	ldd	r31, Y+2	; 0x02
     c74:	82 81       	ldd	r24, Z+2	; 0x02
     c76:	83 30       	cpi	r24, 0x03	; 3
     c78:	79 f4       	brne	.+30     	; 0xc98 <Timer0_init+0x86>
	{
		TCCR0_REG.Bits.FOC0_Bit = 0;
     c7a:	e3 e5       	ldi	r30, 0x53	; 83
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	8f 77       	andi	r24, 0x7F	; 127
     c82:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM00_Bit = 1;
     c84:	e3 e5       	ldi	r30, 0x53	; 83
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	80 64       	ori	r24, 0x40	; 64
     c8c:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM01_Bit = 1;
     c8e:	e3 e5       	ldi	r30, 0x53	; 83
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	88 60       	ori	r24, 0x08	; 8
     c96:	80 83       	st	Z, r24
	}

	/*
	 * insert the required compare output mode in COM bits (COM00 and COM01) of TCCR0 Register
	 */
	if (Config_Ptr->outputMode == NORMAL_MODE_OC0_DISCONNECTED)
     c98:	e9 81       	ldd	r30, Y+1	; 0x01
     c9a:	fa 81       	ldd	r31, Y+2	; 0x02
     c9c:	84 81       	ldd	r24, Z+4	; 0x04
     c9e:	88 23       	and	r24, r24
     ca0:	51 f4       	brne	.+20     	; 0xcb6 <Timer0_init+0xa4>
	{
		TCCR0_REG.Bits.COM00_Bit = 0;
     ca2:	e3 e5       	ldi	r30, 0x53	; 83
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	8f 7e       	andi	r24, 0xEF	; 239
     caa:	80 83       	st	Z, r24
		TCCR0_REG.Bits.COM01_Bit = 0;
     cac:	e3 e5       	ldi	r30, 0x53	; 83
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	8f 7d       	andi	r24, 0xDF	; 223
     cb4:	80 83       	st	Z, r24
	}
	if (Config_Ptr->outputMode == CTC_TOGGLE__PWM_RESERVED)
     cb6:	e9 81       	ldd	r30, Y+1	; 0x01
     cb8:	fa 81       	ldd	r31, Y+2	; 0x02
     cba:	84 81       	ldd	r24, Z+4	; 0x04
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	51 f4       	brne	.+20     	; 0xcd4 <Timer0_init+0xc2>
	{
		TCCR0_REG.Bits.COM00_Bit = 1;
     cc0:	e3 e5       	ldi	r30, 0x53	; 83
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	80 61       	ori	r24, 0x10	; 16
     cc8:	80 83       	st	Z, r24
		TCCR0_REG.Bits.COM01_Bit = 0;
     cca:	e3 e5       	ldi	r30, 0x53	; 83
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	8f 7d       	andi	r24, 0xDF	; 223
     cd2:	80 83       	st	Z, r24
	}
	if (Config_Ptr->outputMode == CTC_CLEAR__PWM_NON_INVERTING)
     cd4:	e9 81       	ldd	r30, Y+1	; 0x01
     cd6:	fa 81       	ldd	r31, Y+2	; 0x02
     cd8:	84 81       	ldd	r24, Z+4	; 0x04
     cda:	82 30       	cpi	r24, 0x02	; 2
     cdc:	51 f4       	brne	.+20     	; 0xcf2 <Timer0_init+0xe0>
	{
		TCCR0_REG.Bits.COM00_Bit = 0;
     cde:	e3 e5       	ldi	r30, 0x53	; 83
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	8f 7e       	andi	r24, 0xEF	; 239
     ce6:	80 83       	st	Z, r24
		TCCR0_REG.Bits.COM01_Bit = 1;
     ce8:	e3 e5       	ldi	r30, 0x53	; 83
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	80 62       	ori	r24, 0x20	; 32
     cf0:	80 83       	st	Z, r24
	}
	if (Config_Ptr->outputMode == CTC_SET__PWM_INVERTING)
     cf2:	e9 81       	ldd	r30, Y+1	; 0x01
     cf4:	fa 81       	ldd	r31, Y+2	; 0x02
     cf6:	84 81       	ldd	r24, Z+4	; 0x04
     cf8:	83 30       	cpi	r24, 0x03	; 3
     cfa:	51 f4       	brne	.+20     	; 0xd10 <Timer0_init+0xfe>
	{
		TCCR0_REG.Bits.COM00_Bit = 1;
     cfc:	e3 e5       	ldi	r30, 0x53	; 83
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	80 61       	ori	r24, 0x10	; 16
     d04:	80 83       	st	Z, r24
		TCCR0_REG.Bits.COM01_Bit = 1;
     d06:	e3 e5       	ldi	r30, 0x53	; 83
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	80 62       	ori	r24, 0x20	; 32
     d0e:	80 83       	st	Z, r24
	}

	/*
	 * insert the required prescaler in CS bits (CS00, CS01 and CS02) of TCCR0 Register
	 */
	TCCR0_REG.Byte = (TCCR0_REG.Byte & 0xF8) | (Config_Ptr->prescaler);
     d10:	a3 e5       	ldi	r26, 0x53	; 83
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e3 e5       	ldi	r30, 0x53	; 83
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	98 2f       	mov	r25, r24
     d1c:	98 7f       	andi	r25, 0xF8	; 248
     d1e:	e9 81       	ldd	r30, Y+1	; 0x01
     d20:	fa 81       	ldd	r31, Y+2	; 0x02
     d22:	83 81       	ldd	r24, Z+3	; 0x03
     d24:	89 2b       	or	r24, r25
     d26:	8c 93       	st	X, r24

	TCNT0_REG = Config_Ptr->initial_value;
     d28:	a2 e5       	ldi	r26, 0x52	; 82
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e9 81       	ldd	r30, Y+1	; 0x01
     d2e:	fa 81       	ldd	r31, Y+2	; 0x02
     d30:	80 81       	ld	r24, Z
     d32:	8c 93       	st	X, r24
	OCR0_REG = Config_Ptr->compare_value;
     d34:	ac e5       	ldi	r26, 0x5C	; 92
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e9 81       	ldd	r30, Y+1	; 0x01
     d3a:	fa 81       	ldd	r31, Y+2	; 0x02
     d3c:	81 81       	ldd	r24, Z+1	; 0x01
     d3e:	8c 93       	st	X, r24

	/* Enable Timer/Counter0 Output Compare Match interrupt */
	TIMSK_REG.Bits.OCIE0_Bit = 1;
     d40:	e9 e5       	ldi	r30, 0x59	; 89
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	82 60       	ori	r24, 0x02	; 2
     d48:	80 83       	st	Z, r24

	/* Enable Timer/Counter0 Overflow Interrupt */
	TIMSK_REG.Bits.TOIE0_Bit = 1;
     d4a:	e9 e5       	ldi	r30, 0x59	; 89
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	81 60       	ori	r24, 0x01	; 1
     d52:	80 83       	st	Z, r24
}
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <Timer0_deInit>:
/*
 * Description :
 * Function to disable the Timer0.
 */
void Timer0_deInit(void)
{
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR0_REG.Byte = 0;
     d66:	e3 e5       	ldi	r30, 0x53	; 83
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	10 82       	st	Z, r1
	TCNT0_REG = 0;
     d6c:	e2 e5       	ldi	r30, 0x52	; 82
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	10 82       	st	Z, r1
	OCR0_REG = 0;
     d72:	ec e5       	ldi	r30, 0x5C	; 92
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	10 82       	st	Z, r1

	/* Disable the Output Compare A match and Overflow interrupt */
	TIMSK_REG.Bits.OCIE0_Bit = 0;
     d78:	e9 e5       	ldi	r30, 0x59	; 89
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	8d 7f       	andi	r24, 0xFD	; 253
     d80:	80 83       	st	Z, r24
	TIMSK_REG.Bits.TOIE0_Bit = 0;
     d82:	e9 e5       	ldi	r30, 0x59	; 89
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	8e 7f       	andi	r24, 0xFE	; 254
     d8a:	80 83       	st	Z, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
     d8c:	10 92 b7 00 	sts	0x00B7, r1
     d90:	10 92 b6 00 	sts	0x00B6, r1
}
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <Timer0_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void Timer0_setCallBack(void (*a_ptr)(void))
{
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <Timer0_setCallBack+0x6>
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	9a 83       	std	Y+2, r25	; 0x02
     da6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	9a 81       	ldd	r25, Y+2	; 0x02
     dac:	90 93 b7 00 	sts	0x00B7, r25
     db0:	80 93 b6 00 	sts	0x00B6, r24
}
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <Timer0_PWM_Start>:
/*
 * Description:
 * Setup the compare value based on the required input value.
 */
void Timer0_PWM_Start(uint8 a_OCR0Value)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	0f 92       	push	r0
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	89 83       	std	Y+1, r24	; 0x01
	OCR0_REG = a_OCR0Value;
     dca:	ec e5       	ldi	r30, 0x5C	; 92
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	80 83       	st	Z, r24
}
     dd2:	0f 90       	pop	r0
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <GPIO_setupPinDirection>:
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction)
{
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	00 d0       	rcall	.+0      	; 0xde0 <GPIO_setupPinDirection+0x6>
     de0:	00 d0       	rcall	.+0      	; 0xde2 <GPIO_setupPinDirection+0x8>
     de2:	0f 92       	push	r0
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	6a 83       	std	Y+2, r22	; 0x02
     dec:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	88 30       	cpi	r24, 0x08	; 8
     df2:	08 f0       	brcs	.+2      	; 0xdf6 <GPIO_setupPinDirection+0x1c>
     df4:	d5 c0       	rjmp	.+426    	; 0xfa0 <GPIO_setupPinDirection+0x1c6>
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	84 30       	cpi	r24, 0x04	; 4
     dfa:	08 f0       	brcs	.+2      	; 0xdfe <GPIO_setupPinDirection+0x24>
     dfc:	d1 c0       	rjmp	.+418    	; 0xfa0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch (port_num)
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	3d 83       	std	Y+5, r19	; 0x05
     e06:	2c 83       	std	Y+4, r18	; 0x04
     e08:	8c 81       	ldd	r24, Y+4	; 0x04
     e0a:	9d 81       	ldd	r25, Y+5	; 0x05
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	91 05       	cpc	r25, r1
     e10:	09 f4       	brne	.+2      	; 0xe14 <GPIO_setupPinDirection+0x3a>
     e12:	43 c0       	rjmp	.+134    	; 0xe9a <GPIO_setupPinDirection+0xc0>
     e14:	2c 81       	ldd	r18, Y+4	; 0x04
     e16:	3d 81       	ldd	r19, Y+5	; 0x05
     e18:	22 30       	cpi	r18, 0x02	; 2
     e1a:	31 05       	cpc	r19, r1
     e1c:	2c f4       	brge	.+10     	; 0xe28 <GPIO_setupPinDirection+0x4e>
     e1e:	8c 81       	ldd	r24, Y+4	; 0x04
     e20:	9d 81       	ldd	r25, Y+5	; 0x05
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	71 f0       	breq	.+28     	; 0xe42 <GPIO_setupPinDirection+0x68>
     e26:	bc c0       	rjmp	.+376    	; 0xfa0 <GPIO_setupPinDirection+0x1c6>
     e28:	2c 81       	ldd	r18, Y+4	; 0x04
     e2a:	3d 81       	ldd	r19, Y+5	; 0x05
     e2c:	22 30       	cpi	r18, 0x02	; 2
     e2e:	31 05       	cpc	r19, r1
     e30:	09 f4       	brne	.+2      	; 0xe34 <GPIO_setupPinDirection+0x5a>
     e32:	5f c0       	rjmp	.+190    	; 0xef2 <GPIO_setupPinDirection+0x118>
     e34:	8c 81       	ldd	r24, Y+4	; 0x04
     e36:	9d 81       	ldd	r25, Y+5	; 0x05
     e38:	83 30       	cpi	r24, 0x03	; 3
     e3a:	91 05       	cpc	r25, r1
     e3c:	09 f4       	brne	.+2      	; 0xe40 <GPIO_setupPinDirection+0x66>
     e3e:	85 c0       	rjmp	.+266    	; 0xf4a <GPIO_setupPinDirection+0x170>
     e40:	af c0       	rjmp	.+350    	; 0xfa0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	a1 f4       	brne	.+40     	; 0xe70 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA_REG.Byte, pin_num);
     e48:	aa e3       	ldi	r26, 0x3A	; 58
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ea e3       	ldi	r30, 0x3A	; 58
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <GPIO_setupPinDirection+0x8c>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <GPIO_setupPinDirection+0x88>
     e6a:	84 2b       	or	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	98 c0       	rjmp	.+304    	; 0xfa0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA_REG.Byte, pin_num);
     e70:	aa e3       	ldi	r26, 0x3A	; 58
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	ea e3       	ldi	r30, 0x3A	; 58
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <GPIO_setupPinDirection+0xb4>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <GPIO_setupPinDirection+0xb0>
     e92:	80 95       	com	r24
     e94:	84 23       	and	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	83 c0       	rjmp	.+262    	; 0xfa0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	a1 f4       	brne	.+40     	; 0xec8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB_REG.Byte, pin_num);
     ea0:	a7 e3       	ldi	r26, 0x37	; 55
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e7 e3       	ldi	r30, 0x37	; 55
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <GPIO_setupPinDirection+0xe4>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <GPIO_setupPinDirection+0xe0>
     ec2:	84 2b       	or	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	6c c0       	rjmp	.+216    	; 0xfa0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB_REG.Byte, pin_num);
     ec8:	a7 e3       	ldi	r26, 0x37	; 55
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e7 e3       	ldi	r30, 0x37	; 55
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <GPIO_setupPinDirection+0x10c>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <GPIO_setupPinDirection+0x108>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	57 c0       	rjmp	.+174    	; 0xfa0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	a1 f4       	brne	.+40     	; 0xf20 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC_REG.Byte, pin_num);
     ef8:	a4 e3       	ldi	r26, 0x34	; 52
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e4 e3       	ldi	r30, 0x34	; 52
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 2e       	mov	r0, r18
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <GPIO_setupPinDirection+0x13c>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	0a 94       	dec	r0
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <GPIO_setupPinDirection+0x138>
     f1a:	84 2b       	or	r24, r20
     f1c:	8c 93       	st	X, r24
     f1e:	40 c0       	rjmp	.+128    	; 0xfa0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC_REG.Byte, pin_num);
     f20:	a4 e3       	ldi	r26, 0x34	; 52
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e4 e3       	ldi	r30, 0x34	; 52
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 2e       	mov	r0, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <GPIO_setupPinDirection+0x164>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <GPIO_setupPinDirection+0x160>
     f42:	80 95       	com	r24
     f44:	84 23       	and	r24, r20
     f46:	8c 93       	st	X, r24
     f48:	2b c0       	rjmp	.+86     	; 0xfa0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	a1 f4       	brne	.+40     	; 0xf78 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD_REG.Byte, pin_num);
     f50:	a1 e3       	ldi	r26, 0x31	; 49
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e1 e3       	ldi	r30, 0x31	; 49
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <GPIO_setupPinDirection+0x194>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <GPIO_setupPinDirection+0x190>
     f72:	84 2b       	or	r24, r20
     f74:	8c 93       	st	X, r24
     f76:	14 c0       	rjmp	.+40     	; 0xfa0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD_REG.Byte, pin_num);
     f78:	a1 e3       	ldi	r26, 0x31	; 49
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e1 e3       	ldi	r30, 0x31	; 49
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <GPIO_setupPinDirection+0x1bc>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <GPIO_setupPinDirection+0x1b8>
     f9a:	80 95       	com	r24
     f9c:	84 23       	and	r24, r20
     f9e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <GPIO_writePin+0x6>
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <GPIO_writePin+0x8>
     fb8:	0f 92       	push	r0
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	6a 83       	std	Y+2, r22	; 0x02
     fc2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	88 30       	cpi	r24, 0x08	; 8
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <GPIO_writePin+0x1c>
     fca:	d5 c0       	rjmp	.+426    	; 0x1176 <GPIO_writePin+0x1c6>
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	84 30       	cpi	r24, 0x04	; 4
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <GPIO_writePin+0x24>
     fd2:	d1 c0       	rjmp	.+418    	; 0x1176 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin value as required */
		switch (port_num)
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	3d 83       	std	Y+5, r19	; 0x05
     fdc:	2c 83       	std	Y+4, r18	; 0x04
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	91 05       	cpc	r25, r1
     fe6:	09 f4       	brne	.+2      	; 0xfea <GPIO_writePin+0x3a>
     fe8:	43 c0       	rjmp	.+134    	; 0x1070 <GPIO_writePin+0xc0>
     fea:	2c 81       	ldd	r18, Y+4	; 0x04
     fec:	3d 81       	ldd	r19, Y+5	; 0x05
     fee:	22 30       	cpi	r18, 0x02	; 2
     ff0:	31 05       	cpc	r19, r1
     ff2:	2c f4       	brge	.+10     	; 0xffe <GPIO_writePin+0x4e>
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	71 f0       	breq	.+28     	; 0x1018 <GPIO_writePin+0x68>
     ffc:	bc c0       	rjmp	.+376    	; 0x1176 <GPIO_writePin+0x1c6>
     ffe:	2c 81       	ldd	r18, Y+4	; 0x04
    1000:	3d 81       	ldd	r19, Y+5	; 0x05
    1002:	22 30       	cpi	r18, 0x02	; 2
    1004:	31 05       	cpc	r19, r1
    1006:	09 f4       	brne	.+2      	; 0x100a <GPIO_writePin+0x5a>
    1008:	5f c0       	rjmp	.+190    	; 0x10c8 <GPIO_writePin+0x118>
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	9d 81       	ldd	r25, Y+5	; 0x05
    100e:	83 30       	cpi	r24, 0x03	; 3
    1010:	91 05       	cpc	r25, r1
    1012:	09 f4       	brne	.+2      	; 0x1016 <GPIO_writePin+0x66>
    1014:	85 c0       	rjmp	.+266    	; 0x1120 <GPIO_writePin+0x170>
    1016:	af c0       	rjmp	.+350    	; 0x1176 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if (value == LOGIC_LOW)
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	88 23       	and	r24, r24
    101c:	a9 f4       	brne	.+42     	; 0x1048 <GPIO_writePin+0x98>
			{
				CLEAR_BIT(PORTA_REG.Byte, pin_num);
    101e:	ab e3       	ldi	r26, 0x3B	; 59
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	eb e3       	ldi	r30, 0x3B	; 59
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <GPIO_writePin+0x8c>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <GPIO_writePin+0x88>
    1040:	80 95       	com	r24
    1042:	84 23       	and	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	97 c0       	rjmp	.+302    	; 0x1176 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTA_REG.Byte, pin_num);
    1048:	ab e3       	ldi	r26, 0x3B	; 59
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	eb e3       	ldi	r30, 0x3B	; 59
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <GPIO_writePin+0xb6>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <GPIO_writePin+0xb2>
    106a:	84 2b       	or	r24, r20
    106c:	8c 93       	st	X, r24
    106e:	83 c0       	rjmp	.+262    	; 0x1176 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_LOW)
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	88 23       	and	r24, r24
    1074:	a9 f4       	brne	.+42     	; 0x10a0 <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB_REG.Byte, pin_num);
    1076:	a8 e3       	ldi	r26, 0x38	; 56
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e8 e3       	ldi	r30, 0x38	; 56
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <GPIO_writePin+0xe4>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <GPIO_writePin+0xe0>
    1098:	80 95       	com	r24
    109a:	84 23       	and	r24, r20
    109c:	8c 93       	st	X, r24
    109e:	6b c0       	rjmp	.+214    	; 0x1176 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB_REG.Byte, pin_num);
    10a0:	a8 e3       	ldi	r26, 0x38	; 56
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e8 e3       	ldi	r30, 0x38	; 56
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <GPIO_writePin+0x10e>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <GPIO_writePin+0x10a>
    10c2:	84 2b       	or	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	57 c0       	rjmp	.+174    	; 0x1176 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_LOW)
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	88 23       	and	r24, r24
    10cc:	a9 f4       	brne	.+42     	; 0x10f8 <GPIO_writePin+0x148>
			{
				CLEAR_BIT(PORTC_REG.Byte, pin_num);
    10ce:	a5 e3       	ldi	r26, 0x35	; 53
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e5 e3       	ldi	r30, 0x35	; 53
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <GPIO_writePin+0x13c>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <GPIO_writePin+0x138>
    10f0:	80 95       	com	r24
    10f2:	84 23       	and	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	3f c0       	rjmp	.+126    	; 0x1176 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTC_REG.Byte, pin_num);
    10f8:	a5 e3       	ldi	r26, 0x35	; 53
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e5 e3       	ldi	r30, 0x35	; 53
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	48 2f       	mov	r20, r24
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 2e       	mov	r0, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <GPIO_writePin+0x166>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <GPIO_writePin+0x162>
    111a:	84 2b       	or	r24, r20
    111c:	8c 93       	st	X, r24
    111e:	2b c0       	rjmp	.+86     	; 0x1176 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_LOW)
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	88 23       	and	r24, r24
    1124:	a9 f4       	brne	.+42     	; 0x1150 <GPIO_writePin+0x1a0>
			{
				CLEAR_BIT(PORTD_REG.Byte, pin_num);
    1126:	a2 e3       	ldi	r26, 0x32	; 50
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e2 e3       	ldi	r30, 0x32	; 50
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <GPIO_writePin+0x194>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <GPIO_writePin+0x190>
    1148:	80 95       	com	r24
    114a:	84 23       	and	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	13 c0       	rjmp	.+38     	; 0x1176 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTD_REG.Byte, pin_num);
    1150:	a2 e3       	ldi	r26, 0x32	; 50
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e2 e3       	ldi	r30, 0x32	; 50
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <GPIO_writePin+0x1be>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <GPIO_writePin+0x1ba>
    1172:	84 2b       	or	r24, r20
    1174:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <GPIO_readPin+0x6>
    118c:	00 d0       	rcall	.+0      	; 0x118e <GPIO_readPin+0x8>
    118e:	0f 92       	push	r0
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	8a 83       	std	Y+2, r24	; 0x02
    1196:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value = LOGIC_LOW;
    1198:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	88 30       	cpi	r24, 0x08	; 8
    119e:	08 f0       	brcs	.+2      	; 0x11a2 <GPIO_readPin+0x1c>
    11a0:	84 c0       	rjmp	.+264    	; 0x12aa <GPIO_readPin+0x124>
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	08 f0       	brcs	.+2      	; 0x11aa <GPIO_readPin+0x24>
    11a8:	80 c0       	rjmp	.+256    	; 0x12aa <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Return the pin value */
		switch (port_num)
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	3d 83       	std	Y+5, r19	; 0x05
    11b2:	2c 83       	std	Y+4, r18	; 0x04
    11b4:	4c 81       	ldd	r20, Y+4	; 0x04
    11b6:	5d 81       	ldd	r21, Y+5	; 0x05
    11b8:	41 30       	cpi	r20, 0x01	; 1
    11ba:	51 05       	cpc	r21, r1
    11bc:	79 f1       	breq	.+94     	; 0x121c <GPIO_readPin+0x96>
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	9d 81       	ldd	r25, Y+5	; 0x05
    11c2:	82 30       	cpi	r24, 0x02	; 2
    11c4:	91 05       	cpc	r25, r1
    11c6:	34 f4       	brge	.+12     	; 0x11d4 <GPIO_readPin+0x4e>
    11c8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ca:	3d 81       	ldd	r19, Y+5	; 0x05
    11cc:	21 15       	cp	r18, r1
    11ce:	31 05       	cpc	r19, r1
    11d0:	69 f0       	breq	.+26     	; 0x11ec <GPIO_readPin+0x66>
    11d2:	6b c0       	rjmp	.+214    	; 0x12aa <GPIO_readPin+0x124>
    11d4:	4c 81       	ldd	r20, Y+4	; 0x04
    11d6:	5d 81       	ldd	r21, Y+5	; 0x05
    11d8:	42 30       	cpi	r20, 0x02	; 2
    11da:	51 05       	cpc	r21, r1
    11dc:	b9 f1       	breq	.+110    	; 0x124c <GPIO_readPin+0xc6>
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	9d 81       	ldd	r25, Y+5	; 0x05
    11e2:	83 30       	cpi	r24, 0x03	; 3
    11e4:	91 05       	cpc	r25, r1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <GPIO_readPin+0x64>
    11e8:	49 c0       	rjmp	.+146    	; 0x127c <GPIO_readPin+0xf6>
    11ea:	5f c0       	rjmp	.+190    	; 0x12aa <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA_REG.Byte, pin_num))
    11ec:	e9 e3       	ldi	r30, 0x39	; 57
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	88 2f       	mov	r24, r24
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	a9 01       	movw	r20, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <GPIO_readPin+0x7e>
    1200:	55 95       	asr	r21
    1202:	47 95       	ror	r20
    1204:	8a 95       	dec	r24
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <GPIO_readPin+0x7a>
    1208:	ca 01       	movw	r24, r20
    120a:	81 70       	andi	r24, 0x01	; 1
    120c:	90 70       	andi	r25, 0x00	; 0
    120e:	88 23       	and	r24, r24
    1210:	19 f0       	breq	.+6      	; 0x1218 <GPIO_readPin+0x92>
			{
				value = LOGIC_HIGH;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	49 c0       	rjmp	.+146    	; 0x12aa <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1218:	19 82       	std	Y+1, r1	; 0x01
    121a:	47 c0       	rjmp	.+142    	; 0x12aa <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB_REG.Byte, pin_num))
    121c:	e6 e3       	ldi	r30, 0x36	; 54
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	88 2f       	mov	r24, r24
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	a9 01       	movw	r20, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <GPIO_readPin+0xae>
    1230:	55 95       	asr	r21
    1232:	47 95       	ror	r20
    1234:	8a 95       	dec	r24
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <GPIO_readPin+0xaa>
    1238:	ca 01       	movw	r24, r20
    123a:	81 70       	andi	r24, 0x01	; 1
    123c:	90 70       	andi	r25, 0x00	; 0
    123e:	88 23       	and	r24, r24
    1240:	19 f0       	breq	.+6      	; 0x1248 <GPIO_readPin+0xc2>
			{
				value = LOGIC_HIGH;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	31 c0       	rjmp	.+98     	; 0x12aa <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1248:	19 82       	std	Y+1, r1	; 0x01
    124a:	2f c0       	rjmp	.+94     	; 0x12aa <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC_REG.Byte, pin_num))
    124c:	e3 e3       	ldi	r30, 0x33	; 51
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	a9 01       	movw	r20, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <GPIO_readPin+0xde>
    1260:	55 95       	asr	r21
    1262:	47 95       	ror	r20
    1264:	8a 95       	dec	r24
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <GPIO_readPin+0xda>
    1268:	ca 01       	movw	r24, r20
    126a:	81 70       	andi	r24, 0x01	; 1
    126c:	90 70       	andi	r25, 0x00	; 0
    126e:	88 23       	and	r24, r24
    1270:	19 f0       	breq	.+6      	; 0x1278 <GPIO_readPin+0xf2>
			{
				value = LOGIC_HIGH;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	89 83       	std	Y+1, r24	; 0x01
    1276:	19 c0       	rjmp	.+50     	; 0x12aa <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1278:	19 82       	std	Y+1, r1	; 0x01
    127a:	17 c0       	rjmp	.+46     	; 0x12aa <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND_REG.Byte, pin_num))
    127c:	e0 e3       	ldi	r30, 0x30	; 48
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	a9 01       	movw	r20, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <GPIO_readPin+0x10e>
    1290:	55 95       	asr	r21
    1292:	47 95       	ror	r20
    1294:	8a 95       	dec	r24
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <GPIO_readPin+0x10a>
    1298:	ca 01       	movw	r24, r20
    129a:	81 70       	andi	r24, 0x01	; 1
    129c:	90 70       	andi	r25, 0x00	; 0
    129e:	88 23       	and	r24, r24
    12a0:	19 f0       	breq	.+6      	; 0x12a8 <GPIO_readPin+0x122>
			{
				value = LOGIC_HIGH;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    12a8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <GPIO_setupPortDirection+0x6>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <GPIO_setupPortDirection+0x8>
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	84 30       	cpi	r24, 0x04	; 4
    12d0:	90 f5       	brcc	.+100    	; 0x1336 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch (port_num)
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	3c 83       	std	Y+4, r19	; 0x04
    12da:	2b 83       	std	Y+3, r18	; 0x03
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	91 05       	cpc	r25, r1
    12e4:	d1 f0       	breq	.+52     	; 0x131a <GPIO_setupPortDirection+0x5e>
    12e6:	2b 81       	ldd	r18, Y+3	; 0x03
    12e8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	31 05       	cpc	r19, r1
    12ee:	2c f4       	brge	.+10     	; 0x12fa <GPIO_setupPortDirection+0x3e>
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	61 f0       	breq	.+24     	; 0x1310 <GPIO_setupPortDirection+0x54>
    12f8:	1e c0       	rjmp	.+60     	; 0x1336 <GPIO_setupPortDirection+0x7a>
    12fa:	2b 81       	ldd	r18, Y+3	; 0x03
    12fc:	3c 81       	ldd	r19, Y+4	; 0x04
    12fe:	22 30       	cpi	r18, 0x02	; 2
    1300:	31 05       	cpc	r19, r1
    1302:	81 f0       	breq	.+32     	; 0x1324 <GPIO_setupPortDirection+0x68>
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	91 05       	cpc	r25, r1
    130c:	81 f0       	breq	.+32     	; 0x132e <GPIO_setupPortDirection+0x72>
    130e:	13 c0       	rjmp	.+38     	; 0x1336 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA_REG.Byte = direction;
    1310:	ea e3       	ldi	r30, 0x3A	; 58
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	80 83       	st	Z, r24
    1318:	0e c0       	rjmp	.+28     	; 0x1336 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG.Byte = direction;
    131a:	e7 e3       	ldi	r30, 0x37	; 55
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	80 83       	st	Z, r24
    1322:	09 c0       	rjmp	.+18     	; 0x1336 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG.Byte = direction;
    1324:	e4 e3       	ldi	r30, 0x34	; 52
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	80 83       	st	Z, r24
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG.Byte = direction;
    132e:	e1 e3       	ldi	r30, 0x31	; 49
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	80 83       	st	Z, r24
			break;
		}
	}
}
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	00 d0       	rcall	.+0      	; 0x134a <GPIO_writePort+0x6>
    134a:	00 d0       	rcall	.+0      	; 0x134c <GPIO_writePort+0x8>
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	84 30       	cpi	r24, 0x04	; 4
    1358:	90 f5       	brcc	.+100    	; 0x13be <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port value as required */
		switch (port_num)
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	3c 83       	std	Y+4, r19	; 0x04
    1362:	2b 83       	std	Y+3, r18	; 0x03
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	91 05       	cpc	r25, r1
    136c:	d1 f0       	breq	.+52     	; 0x13a2 <GPIO_writePort+0x5e>
    136e:	2b 81       	ldd	r18, Y+3	; 0x03
    1370:	3c 81       	ldd	r19, Y+4	; 0x04
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	2c f4       	brge	.+10     	; 0x1382 <GPIO_writePort+0x3e>
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	61 f0       	breq	.+24     	; 0x1398 <GPIO_writePort+0x54>
    1380:	1e c0       	rjmp	.+60     	; 0x13be <GPIO_writePort+0x7a>
    1382:	2b 81       	ldd	r18, Y+3	; 0x03
    1384:	3c 81       	ldd	r19, Y+4	; 0x04
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	81 f0       	breq	.+32     	; 0x13ac <GPIO_writePort+0x68>
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	91 05       	cpc	r25, r1
    1394:	81 f0       	breq	.+32     	; 0x13b6 <GPIO_writePort+0x72>
    1396:	13 c0       	rjmp	.+38     	; 0x13be <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG.Byte = value;
    1398:	eb e3       	ldi	r30, 0x3B	; 59
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	80 83       	st	Z, r24
    13a0:	0e c0       	rjmp	.+28     	; 0x13be <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG.Byte = value;
    13a2:	e8 e3       	ldi	r30, 0x38	; 56
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	80 83       	st	Z, r24
    13aa:	09 c0       	rjmp	.+18     	; 0x13be <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG.Byte = value;
    13ac:	e5 e3       	ldi	r30, 0x35	; 53
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	80 83       	st	Z, r24
    13b4:	04 c0       	rjmp	.+8      	; 0x13be <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG.Byte = value;
    13b6:	e2 e3       	ldi	r30, 0x32	; 50
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	80 83       	st	Z, r24
			break;
		}
	}
}
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <GPIO_readPort+0x6>
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <GPIO_readPort+0x8>
    13d4:	0f 92       	push	r0
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    13dc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	84 30       	cpi	r24, 0x04	; 4
    13e2:	10 f0       	brcs	.+4      	; 0x13e8 <GPIO_readPort+0x1c>
	{
		return 0;
    13e4:	1d 82       	std	Y+5, r1	; 0x05
    13e6:	34 c0       	rjmp	.+104    	; 0x1450 <GPIO_readPort+0x84>
	}
	else
	{
		/* Return the pin value */
		switch (port_num)
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	3c 83       	std	Y+4, r19	; 0x04
    13f0:	2b 83       	std	Y+3, r18	; 0x03
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	91 05       	cpc	r25, r1
    13fa:	d1 f0       	breq	.+52     	; 0x1430 <GPIO_readPort+0x64>
    13fc:	2b 81       	ldd	r18, Y+3	; 0x03
    13fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1400:	22 30       	cpi	r18, 0x02	; 2
    1402:	31 05       	cpc	r19, r1
    1404:	2c f4       	brge	.+10     	; 0x1410 <GPIO_readPort+0x44>
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	61 f0       	breq	.+24     	; 0x1426 <GPIO_readPort+0x5a>
    140e:	1e c0       	rjmp	.+60     	; 0x144c <GPIO_readPort+0x80>
    1410:	2b 81       	ldd	r18, Y+3	; 0x03
    1412:	3c 81       	ldd	r19, Y+4	; 0x04
    1414:	22 30       	cpi	r18, 0x02	; 2
    1416:	31 05       	cpc	r19, r1
    1418:	81 f0       	breq	.+32     	; 0x143a <GPIO_readPort+0x6e>
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	9c 81       	ldd	r25, Y+4	; 0x04
    141e:	83 30       	cpi	r24, 0x03	; 3
    1420:	91 05       	cpc	r25, r1
    1422:	81 f0       	breq	.+32     	; 0x1444 <GPIO_readPort+0x78>
    1424:	13 c0       	rjmp	.+38     	; 0x144c <GPIO_readPort+0x80>
		{
		case PORTA_ID:
			value = PINA_REG.Byte;
    1426:	e9 e3       	ldi	r30, 0x39	; 57
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	0e c0       	rjmp	.+28     	; 0x144c <GPIO_readPort+0x80>
			break;
		case PORTB_ID:
			value = PINB_REG.Byte;
    1430:	e6 e3       	ldi	r30, 0x36	; 54
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	89 83       	std	Y+1, r24	; 0x01
    1438:	09 c0       	rjmp	.+18     	; 0x144c <GPIO_readPort+0x80>
			break;
		case PORTC_ID:
			value = PINC_REG.Byte;
    143a:	e3 e3       	ldi	r30, 0x33	; 51
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	89 83       	std	Y+1, r24	; 0x01
    1442:	04 c0       	rjmp	.+8      	; 0x144c <GPIO_readPort+0x80>
			break;
		case PORTD_ID:
			value = PIND_REG.Byte;
    1444:	e0 e3       	ldi	r30, 0x30	; 48
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    144c:	99 81       	ldd	r25, Y+1	; 0x01
    144e:	9d 83       	std	Y+5, r25	; 0x05
    1450:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <__vector_1>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(INT0_vect)
{
    1462:	1f 92       	push	r1
    1464:	0f 92       	push	r0
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	0f 92       	push	r0
    146a:	11 24       	eor	r1, r1
    146c:	2f 93       	push	r18
    146e:	3f 93       	push	r19
    1470:	4f 93       	push	r20
    1472:	5f 93       	push	r21
    1474:	6f 93       	push	r22
    1476:	7f 93       	push	r23
    1478:	8f 93       	push	r24
    147a:	9f 93       	push	r25
    147c:	af 93       	push	r26
    147e:	bf 93       	push	r27
    1480:	ef 93       	push	r30
    1482:	ff 93       	push	r31
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtrExtInt0 != NULL_PTR)
    148c:	80 91 b8 00 	lds	r24, 0x00B8
    1490:	90 91 b9 00 	lds	r25, 0x00B9
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	29 f0       	breq	.+10     	; 0x14a2 <__vector_1+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrExtInt0)();
    1498:	e0 91 b8 00 	lds	r30, 0x00B8
    149c:	f0 91 b9 00 	lds	r31, 0x00B9
    14a0:	09 95       	icall
	}
}
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	ff 91       	pop	r31
    14a8:	ef 91       	pop	r30
    14aa:	bf 91       	pop	r27
    14ac:	af 91       	pop	r26
    14ae:	9f 91       	pop	r25
    14b0:	8f 91       	pop	r24
    14b2:	7f 91       	pop	r23
    14b4:	6f 91       	pop	r22
    14b6:	5f 91       	pop	r21
    14b8:	4f 91       	pop	r20
    14ba:	3f 91       	pop	r19
    14bc:	2f 91       	pop	r18
    14be:	0f 90       	pop	r0
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	0f 90       	pop	r0
    14c4:	1f 90       	pop	r1
    14c6:	18 95       	reti

000014c8 <__vector_2>:

ISR(INT1_vect)
{
    14c8:	1f 92       	push	r1
    14ca:	0f 92       	push	r0
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	0f 92       	push	r0
    14d0:	11 24       	eor	r1, r1
    14d2:	2f 93       	push	r18
    14d4:	3f 93       	push	r19
    14d6:	4f 93       	push	r20
    14d8:	5f 93       	push	r21
    14da:	6f 93       	push	r22
    14dc:	7f 93       	push	r23
    14de:	8f 93       	push	r24
    14e0:	9f 93       	push	r25
    14e2:	af 93       	push	r26
    14e4:	bf 93       	push	r27
    14e6:	ef 93       	push	r30
    14e8:	ff 93       	push	r31
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtrExtInt1 != NULL_PTR)
    14f2:	80 91 ba 00 	lds	r24, 0x00BA
    14f6:	90 91 bb 00 	lds	r25, 0x00BB
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	29 f0       	breq	.+10     	; 0x1508 <__vector_2+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrExtInt1)();
    14fe:	e0 91 ba 00 	lds	r30, 0x00BA
    1502:	f0 91 bb 00 	lds	r31, 0x00BB
    1506:	09 95       	icall
	}
}
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	ff 91       	pop	r31
    150e:	ef 91       	pop	r30
    1510:	bf 91       	pop	r27
    1512:	af 91       	pop	r26
    1514:	9f 91       	pop	r25
    1516:	8f 91       	pop	r24
    1518:	7f 91       	pop	r23
    151a:	6f 91       	pop	r22
    151c:	5f 91       	pop	r21
    151e:	4f 91       	pop	r20
    1520:	3f 91       	pop	r19
    1522:	2f 91       	pop	r18
    1524:	0f 90       	pop	r0
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	0f 90       	pop	r0
    152a:	1f 90       	pop	r1
    152c:	18 95       	reti

0000152e <__vector_3>:

ISR(INT2_vect)
{
    152e:	1f 92       	push	r1
    1530:	0f 92       	push	r0
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	0f 92       	push	r0
    1536:	11 24       	eor	r1, r1
    1538:	2f 93       	push	r18
    153a:	3f 93       	push	r19
    153c:	4f 93       	push	r20
    153e:	5f 93       	push	r21
    1540:	6f 93       	push	r22
    1542:	7f 93       	push	r23
    1544:	8f 93       	push	r24
    1546:	9f 93       	push	r25
    1548:	af 93       	push	r26
    154a:	bf 93       	push	r27
    154c:	ef 93       	push	r30
    154e:	ff 93       	push	r31
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtrExtInt2 != NULL_PTR)
    1558:	80 91 bc 00 	lds	r24, 0x00BC
    155c:	90 91 bd 00 	lds	r25, 0x00BD
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	29 f0       	breq	.+10     	; 0x156e <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrExtInt2)();
    1564:	e0 91 bc 00 	lds	r30, 0x00BC
    1568:	f0 91 bd 00 	lds	r31, 0x00BD
    156c:	09 95       	icall
	}
}
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	ff 91       	pop	r31
    1574:	ef 91       	pop	r30
    1576:	bf 91       	pop	r27
    1578:	af 91       	pop	r26
    157a:	9f 91       	pop	r25
    157c:	8f 91       	pop	r24
    157e:	7f 91       	pop	r23
    1580:	6f 91       	pop	r22
    1582:	5f 91       	pop	r21
    1584:	4f 91       	pop	r20
    1586:	3f 91       	pop	r19
    1588:	2f 91       	pop	r18
    158a:	0f 90       	pop	r0
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	0f 90       	pop	r0
    1590:	1f 90       	pop	r1
    1592:	18 95       	reti

00001594 <EXT_INT0_init>:
/*
 * Description :
 * Function to initialize the EXT INT0 driver.
 */
void EXT_INT0_init(const EXT_INT0_ConfigType *Config_Ptr)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	00 d0       	rcall	.+0      	; 0x159a <EXT_INT0_init+0x6>
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
	/************************** MCUCR Description **************************
	 * ISC01, ISC00   	Interrupt Sense Control 0 , selected in configuration
	 ***********************************************************************/
	MCUCR_REG.Byte = (MCUCR_REG.Byte & 0xFC) | ((Config_Ptr->mode) & 0x03);
    15a2:	a5 e5       	ldi	r26, 0x55	; 85
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e5 e5       	ldi	r30, 0x55	; 85
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	98 2f       	mov	r25, r24
    15ae:	9c 7f       	andi	r25, 0xFC	; 252
    15b0:	e9 81       	ldd	r30, Y+1	; 0x01
    15b2:	fa 81       	ldd	r31, Y+2	; 0x02
    15b4:	80 81       	ld	r24, Z
    15b6:	83 70       	andi	r24, 0x03	; 3
    15b8:	89 2b       	or	r24, r25
    15ba:	8c 93       	st	X, r24

	/* Setup the INT0 pin as input */
	GPIO_setupPinDirection(INT0_PORTID, INT0_PINID, PIN_INPUT);
    15bc:	83 e0       	ldi	r24, 0x03	; 3
    15be:	62 e0       	ldi	r22, 0x02	; 2
    15c0:	40 e0       	ldi	r20, 0x00	; 0
    15c2:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>

	/* Enable External Interrupt Request 0 */
	GICR_REG.Bits.INT0_Bit = 1;
    15c6:	eb e5       	ldi	r30, 0x5B	; 91
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	80 64       	ori	r24, 0x40	; 64
    15ce:	80 83       	st	Z, r24
}
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <EXT_INT1_init>:
/*
 * Description :
 * Function to initialize the EXT INT1 driver.
 */
void EXT_INT1_init(const EXT_INT1_ConfigType *Config_Ptr)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <EXT_INT1_init+0x6>
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	9a 83       	std	Y+2, r25	; 0x02
    15e6:	89 83       	std	Y+1, r24	; 0x01
	/************************** MCUCR Description **************************
	 * ISC11, ISC10   	Interrupt Sense Control 1 , selected in configuration
	 ***********************************************************************/
	MCUCR_REG.Byte = (MCUCR_REG.Byte & 0xF3)
    15e8:	a5 e5       	ldi	r26, 0x55	; 85
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e5 e5       	ldi	r30, 0x55	; 85
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	28 2f       	mov	r18, r24
    15f4:	23 7f       	andi	r18, 0xF3	; 243
    15f6:	e9 81       	ldd	r30, Y+1	; 0x01
    15f8:	fa 81       	ldd	r31, Y+2	; 0x02
    15fa:	80 81       	ld	r24, Z
    15fc:	88 2f       	mov	r24, r24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	83 70       	andi	r24, 0x03	; 3
    1602:	90 70       	andi	r25, 0x00	; 0
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	82 2b       	or	r24, r18
    160e:	8c 93       	st	X, r24
			| (((Config_Ptr->mode) & 0x03) << 2);

	/* Setup the INT1 pin as input */
	GPIO_setupPinDirection(INT1_PORTID, INT1_PINID, PIN_INPUT);
    1610:	83 e0       	ldi	r24, 0x03	; 3
    1612:	63 e0       	ldi	r22, 0x03	; 3
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>

	/* Enable External Interrupt Request 1 */
	GICR_REG.Bits.INT1_Bit = 1;
    161a:	eb e5       	ldi	r30, 0x5B	; 91
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	80 68       	ori	r24, 0x80	; 128
    1622:	80 83       	st	Z, r24
}
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <EXT_INT2_init>:
/*
 * Description :
 * Function to initialize the EXT INT2 driver.
 */
void EXT_INT2_init(const EXT_INT2_ConfigType *Config_Ptr)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <EXT_INT2_init+0x6>
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	9a 83       	std	Y+2, r25	; 0x02
    163a:	89 83       	std	Y+1, r24	; 0x01
	/************************** MCUCSR Description *************************
	 * ISC2 		Interrupt Sense Control 2 , selected in configuration
	 ***********************************************************************/
	if (Config_Ptr->mode == EXT_INT2_FALLING_EDGE)
    163c:	e9 81       	ldd	r30, Y+1	; 0x01
    163e:	fa 81       	ldd	r31, Y+2	; 0x02
    1640:	80 81       	ld	r24, Z
    1642:	88 23       	and	r24, r24
    1644:	31 f4       	brne	.+12     	; 0x1652 <EXT_INT2_init+0x24>
	{
		MCUCSR_REG.Bits.ISC2_Bit = 0;
    1646:	e4 e5       	ldi	r30, 0x54	; 84
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	8f 7b       	andi	r24, 0xBF	; 191
    164e:	80 83       	st	Z, r24
    1650:	05 c0       	rjmp	.+10     	; 0x165c <EXT_INT2_init+0x2e>
	}
	else
	{
		MCUCSR_REG.Bits.ISC2_Bit = 1;
    1652:	e4 e5       	ldi	r30, 0x54	; 84
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	80 64       	ori	r24, 0x40	; 64
    165a:	80 83       	st	Z, r24
	}

	/* Setup the INT2 pin as input */
	GPIO_setupPinDirection(INT2_PORTID, INT2_PINID, PIN_INPUT);
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	62 e0       	ldi	r22, 0x02	; 2
    1660:	40 e0       	ldi	r20, 0x00	; 0
    1662:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>

	/* Enable External Interrupt Request 2 */
	GICR_REG.Bits.INT2_Bit = 1;
    1666:	eb e5       	ldi	r30, 0x5B	; 91
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	80 62       	ori	r24, 0x20	; 32
    166e:	80 83       	st	Z, r24
}
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <EXT_INT0_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void EXT_INT0_setCallBack(void (*a_ptr)(void))
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	00 d0       	rcall	.+0      	; 0x1680 <EXT_INT0_setCallBack+0x6>
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	9a 83       	std	Y+2, r25	; 0x02
    1686:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrExtInt0 = a_ptr;
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	9a 81       	ldd	r25, Y+2	; 0x02
    168c:	90 93 b9 00 	sts	0x00B9, r25
    1690:	80 93 b8 00 	sts	0x00B8, r24
}
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <EXT_INT1_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void EXT_INT1_setCallBack(void (*a_ptr)(void))
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <EXT_INT1_setCallBack+0x6>
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	9a 83       	std	Y+2, r25	; 0x02
    16aa:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrExtInt1 = a_ptr;
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	9a 81       	ldd	r25, Y+2	; 0x02
    16b0:	90 93 bb 00 	sts	0x00BB, r25
    16b4:	80 93 ba 00 	sts	0x00BA, r24
}
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <EXT_INT2_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void EXT_INT2_setCallBack(void (*a_ptr)(void))
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <EXT_INT2_setCallBack+0x6>
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	9a 83       	std	Y+2, r25	; 0x02
    16ce:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrExtInt2 = a_ptr;
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	9a 81       	ldd	r25, Y+2	; 0x02
    16d4:	90 93 bd 00 	sts	0x00BD, r25
    16d8:	80 93 bc 00 	sts	0x00BC, r24
}
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <ADC_init>:

#include "adc.h"
#include "adc_private.h"

void ADC_init(const ADC_ConfigType *Config_Ptr)
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <ADC_init+0x6>
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required reference voltage in the last two bits (REFS0 and REFS1)
	 * of ADMUX Register
	 */
	ADMUX_REG.Byte = (ADMUX_REG.Byte & 0x3F) | ((Config_Ptr->reference) << 6);
    16f4:	a7 e2       	ldi	r26, 0x27	; 39
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e7 e2       	ldi	r30, 0x27	; 39
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	28 2f       	mov	r18, r24
    1700:	2f 73       	andi	r18, 0x3F	; 63
    1702:	e9 81       	ldd	r30, Y+1	; 0x01
    1704:	fa 81       	ldd	r31, Y+2	; 0x02
    1706:	80 81       	ld	r24, Z
    1708:	88 2f       	mov	r24, r24
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	00 24       	eor	r0, r0
    170e:	96 95       	lsr	r25
    1710:	87 95       	ror	r24
    1712:	07 94       	ror	r0
    1714:	96 95       	lsr	r25
    1716:	87 95       	ror	r24
    1718:	07 94       	ror	r0
    171a:	98 2f       	mov	r25, r24
    171c:	80 2d       	mov	r24, r0
    171e:	82 2b       	or	r24, r18
    1720:	8c 93       	st	X, r24
	/* ADMUX Register Bits Description:
	 * REFS1:0 = the reference voltage inserted has been inserted in previous step
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX_REG.Byte &= 0xC0;
    1722:	a7 e2       	ldi	r26, 0x27	; 39
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e7 e2       	ldi	r30, 0x27	; 39
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	80 7c       	andi	r24, 0xC0	; 192
    172e:	8c 93       	st	X, r24

	/*
	 * insert the required prescaler in the first three bits (ADPS0, ADPS1 and ADPS2)
	 * of ADCSRA Register
	 */
	ADCSRA_REG.Byte = (ADCSRA_REG.Byte & 0xF8) | (Config_Ptr->prescaler);
    1730:	a6 e2       	ldi	r26, 0x26	; 38
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e6 e2       	ldi	r30, 0x26	; 38
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	98 2f       	mov	r25, r24
    173c:	98 7f       	andi	r25, 0xF8	; 248
    173e:	e9 81       	ldd	r30, Y+1	; 0x01
    1740:	fa 81       	ldd	r31, Y+2	; 0x02
    1742:	81 81       	ldd	r24, Z+1	; 0x01
    1744:	89 2b       	or	r24, r25
    1746:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = the prescaler has been inserted in previous step and ADC must operate in range 50-200Khz
	 */
	ADCSRA_REG.Bits.ADEN_Bit = 1;
    1748:	e6 e2       	ldi	r30, 0x26	; 38
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	80 68       	ori	r24, 0x80	; 128
    1750:	80 83       	st	Z, r24
	ADCSRA_REG.Bits.ADIE_Bit = 0;
    1752:	e6 e2       	ldi	r30, 0x26	; 38
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	87 7f       	andi	r24, 0xF7	; 247
    175a:	80 83       	st	Z, r24
	ADCSRA_REG.Bits.ADATE_Bit = 0;
    175c:	e6 e2       	ldi	r30, 0x26	; 38
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	8f 7d       	andi	r24, 0xDF	; 223
    1764:	80 83       	st	Z, r24
}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	0f 92       	push	r0
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	89 83       	std	Y+1, r24	; 0x01
	/* Choose the correct channel by setting the channel number in MUX4:0 bits */
	ADMUX_REG.Byte = (ADMUX_REG.Byte & 0xE0) | (channel_num & 0x07);
    177c:	a7 e2       	ldi	r26, 0x27	; 39
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e7 e2       	ldi	r30, 0x27	; 39
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	98 2f       	mov	r25, r24
    1788:	90 7e       	andi	r25, 0xE0	; 224
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	87 70       	andi	r24, 0x07	; 7
    178e:	89 2b       	or	r24, r25
    1790:	8c 93       	st	X, r24

	/* Start conversion write '1' to ADSC */
	ADCSRA_REG.Bits.ADSC_Bit = 1;
    1792:	e6 e2       	ldi	r30, 0x26	; 38
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	80 64       	ori	r24, 0x40	; 64
    179a:	80 83       	st	Z, r24

	/* Wait for conversion to complete, ADIF becomes '1' */
	while (ADCSRA_REG.Bits.ADIF_Bit == 0)
    179c:	e6 e2       	ldi	r30, 0x26	; 38
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	80 71       	andi	r24, 0x10	; 16
    17a4:	88 23       	and	r24, r24
    17a6:	d1 f3       	breq	.-12     	; 0x179c <ADC_readChannel+0x2c>
		;
	/* Clear ADIF by write '1' to it */
	ADCSRA_REG.Bits.ADIF_Bit = 1;
    17a8:	e6 e2       	ldi	r30, 0x26	; 38
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	80 61       	ori	r24, 0x10	; 16
    17b0:	80 83       	st	Z, r24

	/* Read the digital value from the data register */
	return ADC_REG;
    17b2:	e4 e2       	ldi	r30, 0x24	; 36
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
}
    17ba:	0f 90       	pop	r0
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <ServoMotor_init>:
 * 1. The Function responsible for setup the direction for the servo motor pins through the GPIO driver.
 * 2. Setup the timer0 driver with PWM mode.
 * 3. Set the servo in 0 degree position as initial state.
 */
void ServoMotor_init(void)
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	2a 97       	sbiw	r28, 0x0a	; 10
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
	/* Set The Configuration Of Timer0 To Be in FAST PWM Mode */
	TIMER0_ConfigType TIMER0_CONFIG =
	{ 0, 0, FAST_PWM_MODE, PRESCALER_256, CTC_CLEAR__PWM_NON_INVERTING };
    17d6:	ce 01       	movw	r24, r28
    17d8:	01 96       	adiw	r24, 0x01	; 1
    17da:	9f 83       	std	Y+7, r25	; 0x07
    17dc:	8e 83       	std	Y+6, r24	; 0x06
    17de:	eb ea       	ldi	r30, 0xAB	; 171
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	f9 87       	std	Y+9, r31	; 0x09
    17e4:	e8 87       	std	Y+8, r30	; 0x08
    17e6:	f5 e0       	ldi	r31, 0x05	; 5
    17e8:	fa 87       	std	Y+10, r31	; 0x0a
    17ea:	e8 85       	ldd	r30, Y+8	; 0x08
    17ec:	f9 85       	ldd	r31, Y+9	; 0x09
    17ee:	00 80       	ld	r0, Z
    17f0:	88 85       	ldd	r24, Y+8	; 0x08
    17f2:	99 85       	ldd	r25, Y+9	; 0x09
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	99 87       	std	Y+9, r25	; 0x09
    17f8:	88 87       	std	Y+8, r24	; 0x08
    17fa:	ee 81       	ldd	r30, Y+6	; 0x06
    17fc:	ff 81       	ldd	r31, Y+7	; 0x07
    17fe:	00 82       	st	Z, r0
    1800:	8e 81       	ldd	r24, Y+6	; 0x06
    1802:	9f 81       	ldd	r25, Y+7	; 0x07
    1804:	01 96       	adiw	r24, 0x01	; 1
    1806:	9f 83       	std	Y+7, r25	; 0x07
    1808:	8e 83       	std	Y+6, r24	; 0x06
    180a:	9a 85       	ldd	r25, Y+10	; 0x0a
    180c:	91 50       	subi	r25, 0x01	; 1
    180e:	9a 87       	std	Y+10, r25	; 0x0a
    1810:	ea 85       	ldd	r30, Y+10	; 0x0a
    1812:	ee 23       	and	r30, r30
    1814:	51 f7       	brne	.-44     	; 0x17ea <ServoMotor_init+0x28>

	/* Init Timer0 in FAST PWM Mode */
	Timer0_init(&TIMER0_CONFIG);
    1816:	ce 01       	movw	r24, r28
    1818:	01 96       	adiw	r24, 0x01	; 1
    181a:	0e 94 09 06 	call	0xc12	; 0xc12 <Timer0_init>

	/* Set OC0 pin direction as output */
	GPIO_setupPinDirection(OC0_PORTID, OC0_PINID, PIN_OUTPUT);
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	63 e0       	ldi	r22, 0x03	; 3
    1822:	41 e0       	ldi	r20, 0x01	; 1
    1824:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>

	/* Set the servo in 0 degree position as initial state */
	Timer0_PWM_Start(OCR0_VALUE_FOR_0_DEGREES);
    1828:	8e e3       	ldi	r24, 0x3E	; 62
    182a:	0e 94 df 06 	call	0xdbe	; 0xdbe <Timer0_PWM_Start>
}
    182e:	2a 96       	adiw	r28, 0x0a	; 10
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <ServoMotor_Rotate>:
 * Description :
 * 1. The function responsible for rotate the servo Motor 0, 90 or 180 degree
 *    based on the state input state value.
 */
void ServoMotor_Rotate(ServoMotor_State a_state)
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	00 d0       	rcall	.+0      	; 0x1846 <ServoMotor_Rotate+0x6>
    1846:	0f 92       	push	r0
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	89 83       	std	Y+1, r24	; 0x01
	switch (a_state)
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	3b 83       	std	Y+3, r19	; 0x03
    1856:	2a 83       	std	Y+2, r18	; 0x02
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	9b 81       	ldd	r25, Y+3	; 0x03
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	91 05       	cpc	r25, r1
    1860:	31 f0       	breq	.+12     	; 0x186e <ServoMotor_Rotate+0x2e>
    1862:	2a 81       	ldd	r18, Y+2	; 0x02
    1864:	3b 81       	ldd	r19, Y+3	; 0x03
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	29 f0       	breq	.+10     	; 0x1876 <ServoMotor_Rotate+0x36>
    186c:	08 c0       	rjmp	.+16     	; 0x187e <ServoMotor_Rotate+0x3e>
	{
	case Degree_90:
		/* Set the servo in 90 degree position */
		Timer0_PWM_Start(OCR0_VALUE_FOR_90_DEGREES);
    186e:	8d e5       	ldi	r24, 0x5D	; 93
    1870:	0e 94 df 06 	call	0xdbe	; 0xdbe <Timer0_PWM_Start>
    1874:	07 c0       	rjmp	.+14     	; 0x1884 <ServoMotor_Rotate+0x44>
		break;
	case Degree_180:
		/* Set the servo in 180 degree position */
		Timer0_PWM_Start(OCR0_VALUE_FOR_180_DEGREES);
    1876:	8c e7       	ldi	r24, 0x7C	; 124
    1878:	0e 94 df 06 	call	0xdbe	; 0xdbe <Timer0_PWM_Start>
    187c:	03 c0       	rjmp	.+6      	; 0x1884 <ServoMotor_Rotate+0x44>
		break;
	default:
		/* Any case else, set the servo in 0 degree position */
		Timer0_PWM_Start(OCR0_VALUE_FOR_0_DEGREES);
    187e:	8e e3       	ldi	r24, 0x3E	; 62
    1880:	0e 94 df 06 	call	0xdbe	; 0xdbe <Timer0_PWM_Start>
	}
}
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <LDRsensor_getValue>:
#include "../../LIB/std_types.h"
#include "ldr.h"
#include "../../MCAL/ADC/adc.h"

uint16 LDRsensor_getValue(void)
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	00 d0       	rcall	.+0      	; 0x1896 <LDRsensor_getValue+0x6>
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
	uint16 adc_value = 0;
    189a:	1a 82       	std	Y+2, r1	; 0x02
    189c:	19 82       	std	Y+1, r1	; 0x01
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	0e 94 b8 0b 	call	0x1770	; 0x1770 <ADC_readChannel>
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	89 83       	std	Y+1, r24	; 0x01
	return adc_value;
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	9a 81       	ldd	r25, Y+2	; 0x02
}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	2e 97       	sbiw	r28, 0x0e	; 14
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	61 e0       	ldi	r22, 0x01	; 1
    18ce:	41 e0       	ldi	r20, 0x01	; 1
    18d0:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	62 e0       	ldi	r22, 0x02	; 2
    18d8:	41 e0       	ldi	r20, 0x01	; 1
    18da:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a0 ea       	ldi	r26, 0xA0	; 160
    18e4:	b1 e4       	ldi	r27, 0x41	; 65
    18e6:	8b 87       	std	Y+11, r24	; 0x0b
    18e8:	9c 87       	std	Y+12, r25	; 0x0c
    18ea:	ad 87       	std	Y+13, r26	; 0x0d
    18ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	4a e7       	ldi	r20, 0x7A	; 122
    18fc:	55 e4       	ldi	r21, 0x45	; 69
    18fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	8f 83       	std	Y+7, r24	; 0x07
    1908:	98 87       	std	Y+8, r25	; 0x08
    190a:	a9 87       	std	Y+9, r26	; 0x09
    190c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    190e:	6f 81       	ldd	r22, Y+7	; 0x07
    1910:	78 85       	ldd	r23, Y+8	; 0x08
    1912:	89 85       	ldd	r24, Y+9	; 0x09
    1914:	9a 85       	ldd	r25, Y+10	; 0x0a
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e8       	ldi	r20, 0x80	; 128
    191c:	5f e3       	ldi	r21, 0x3F	; 63
    191e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1922:	88 23       	and	r24, r24
    1924:	2c f4       	brge	.+10     	; 0x1930 <LCD_init+0x7a>
		__ticks = 1;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	9e 83       	std	Y+6, r25	; 0x06
    192c:	8d 83       	std	Y+5, r24	; 0x05
    192e:	3f c0       	rjmp	.+126    	; 0x19ae <LCD_init+0xf8>
	else if (__tmp > 65535)
    1930:	6f 81       	ldd	r22, Y+7	; 0x07
    1932:	78 85       	ldd	r23, Y+8	; 0x08
    1934:	89 85       	ldd	r24, Y+9	; 0x09
    1936:	9a 85       	ldd	r25, Y+10	; 0x0a
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	3f ef       	ldi	r19, 0xFF	; 255
    193c:	4f e7       	ldi	r20, 0x7F	; 127
    193e:	57 e4       	ldi	r21, 0x47	; 71
    1940:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1944:	18 16       	cp	r1, r24
    1946:	4c f5       	brge	.+82     	; 0x199a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1948:	6b 85       	ldd	r22, Y+11	; 0x0b
    194a:	7c 85       	ldd	r23, Y+12	; 0x0c
    194c:	8d 85       	ldd	r24, Y+13	; 0x0d
    194e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e2       	ldi	r20, 0x20	; 32
    1956:	51 e4       	ldi	r21, 0x41	; 65
    1958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	9e 83       	std	Y+6, r25	; 0x06
    196e:	8d 83       	std	Y+5, r24	; 0x05
    1970:	0f c0       	rjmp	.+30     	; 0x1990 <LCD_init+0xda>
    1972:	80 e9       	ldi	r24, 0x90	; 144
    1974:	91 e0       	ldi	r25, 0x01	; 1
    1976:	9c 83       	std	Y+4, r25	; 0x04
    1978:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	9c 81       	ldd	r25, Y+4	; 0x04
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <LCD_init+0xc8>
    1982:	9c 83       	std	Y+4, r25	; 0x04
    1984:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	9e 81       	ldd	r25, Y+6	; 0x06
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	9e 83       	std	Y+6, r25	; 0x06
    198e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1990:	8d 81       	ldd	r24, Y+5	; 0x05
    1992:	9e 81       	ldd	r25, Y+6	; 0x06
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	69 f7       	brne	.-38     	; 0x1972 <LCD_init+0xbc>
    1998:	14 c0       	rjmp	.+40     	; 0x19c2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199a:	6f 81       	ldd	r22, Y+7	; 0x07
    199c:	78 85       	ldd	r23, Y+8	; 0x08
    199e:	89 85       	ldd	r24, Y+9	; 0x09
    19a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	9e 83       	std	Y+6, r25	; 0x06
    19ac:	8d 83       	std	Y+5, r24	; 0x05
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	9e 81       	ldd	r25, Y+6	; 0x06
    19b2:	9a 83       	std	Y+2, r25	; 0x02
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <LCD_init+0x104>
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20); /* LCD Power ON delay always > 15ms */

#if (LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, PIN_OUTPUT);
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	63 e0       	ldi	r22, 0x03	; 3
    19c6:	41 e0       	ldi	r20, 0x01	; 1
    19c8:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, PIN_OUTPUT);
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	64 e0       	ldi	r22, 0x04	; 4
    19d0:	41 e0       	ldi	r20, 0x01	; 1
    19d2:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, PIN_OUTPUT);
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	65 e0       	ldi	r22, 0x05	; 5
    19da:	41 e0       	ldi	r20, 0x01	; 1
    19dc:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, PIN_OUTPUT);
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	66 e0       	ldi	r22, 0x06	; 6
    19e4:	41 e0       	ldi	r20, 0x01	; 1
    19e6:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    19ea:	83 e3       	ldi	r24, 0x33	; 51
    19ec:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    19f0:	82 e3       	ldi	r24, 0x32	; 50
    19f2:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    19f6:	88 e2       	ldi	r24, 0x28	; 40
    19f8:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    19fc:	8c e0       	ldi	r24, 0x0C	; 12
    19fe:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <LCD_sendCommand>
}
    1a08:	2e 96       	adiw	r28, 0x0e	; 14
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	08 95       	ret

00001a1a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 a_command)
{
    1a1a:	0f 93       	push	r16
    1a1c:	1f 93       	push	r17
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	c3 56       	subi	r28, 0x63	; 99
    1a28:	d0 40       	sbci	r29, 0x00	; 0
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	fe 01       	movw	r30, r28
    1a36:	ed 59       	subi	r30, 0x9D	; 157
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	61 e0       	ldi	r22, 0x01	; 1
    1a40:	40 e0       	ldi	r20, 0x00	; 0
    1a42:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
    1a46:	fe 01       	movw	r30, r28
    1a48:	e1 5a       	subi	r30, 0xA1	; 161
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a0 e8       	ldi	r26, 0x80	; 128
    1a52:	bf e3       	ldi	r27, 0x3F	; 63
    1a54:	80 83       	st	Z, r24
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	a2 83       	std	Z+2, r26	; 0x02
    1a5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5c:	8e 01       	movw	r16, r28
    1a5e:	05 5a       	subi	r16, 0xA5	; 165
    1a60:	1f 4f       	sbci	r17, 0xFF	; 255
    1a62:	fe 01       	movw	r30, r28
    1a64:	e1 5a       	subi	r30, 0xA1	; 161
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	60 81       	ld	r22, Z
    1a6a:	71 81       	ldd	r23, Z+1	; 0x01
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	4a e7       	ldi	r20, 0x7A	; 122
    1a76:	55 e4       	ldi	r21, 0x45	; 69
    1a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	f8 01       	movw	r30, r16
    1a82:	80 83       	st	Z, r24
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	a2 83       	std	Z+2, r26	; 0x02
    1a88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e5 5a       	subi	r30, 0xA5	; 165
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	60 81       	ld	r22, Z
    1a92:	71 81       	ldd	r23, Z+1	; 0x01
    1a94:	82 81       	ldd	r24, Z+2	; 0x02
    1a96:	93 81       	ldd	r25, Z+3	; 0x03
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e8       	ldi	r20, 0x80	; 128
    1a9e:	5f e3       	ldi	r21, 0x3F	; 63
    1aa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa4:	88 23       	and	r24, r24
    1aa6:	44 f4       	brge	.+16     	; 0x1ab8 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e7 5a       	subi	r30, 0xA7	; 167
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	91 83       	std	Z+1, r25	; 0x01
    1ab4:	80 83       	st	Z, r24
    1ab6:	64 c0       	rjmp	.+200    	; 0x1b80 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1ab8:	fe 01       	movw	r30, r28
    1aba:	e5 5a       	subi	r30, 0xA5	; 165
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	60 81       	ld	r22, Z
    1ac0:	71 81       	ldd	r23, Z+1	; 0x01
    1ac2:	82 81       	ldd	r24, Z+2	; 0x02
    1ac4:	93 81       	ldd	r25, Z+3	; 0x03
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad2:	18 16       	cp	r1, r24
    1ad4:	0c f0       	brlt	.+2      	; 0x1ad8 <LCD_sendCommand+0xbe>
    1ad6:	43 c0       	rjmp	.+134    	; 0x1b5e <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad8:	fe 01       	movw	r30, r28
    1ada:	e1 5a       	subi	r30, 0xA1	; 161
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	60 81       	ld	r22, Z
    1ae0:	71 81       	ldd	r23, Z+1	; 0x01
    1ae2:	82 81       	ldd	r24, Z+2	; 0x02
    1ae4:	93 81       	ldd	r25, Z+3	; 0x03
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e2       	ldi	r20, 0x20	; 32
    1aec:	51 e4       	ldi	r21, 0x41	; 65
    1aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	8e 01       	movw	r16, r28
    1af8:	07 5a       	subi	r16, 0xA7	; 167
    1afa:	1f 4f       	sbci	r17, 0xFF	; 255
    1afc:	bc 01       	movw	r22, r24
    1afe:	cd 01       	movw	r24, r26
    1b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	f8 01       	movw	r30, r16
    1b0a:	91 83       	std	Z+1, r25	; 0x01
    1b0c:	80 83       	st	Z, r24
    1b0e:	1f c0       	rjmp	.+62     	; 0x1b4e <LCD_sendCommand+0x134>
    1b10:	fe 01       	movw	r30, r28
    1b12:	e9 5a       	subi	r30, 0xA9	; 169
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	80 e9       	ldi	r24, 0x90	; 144
    1b18:	91 e0       	ldi	r25, 0x01	; 1
    1b1a:	91 83       	std	Z+1, r25	; 0x01
    1b1c:	80 83       	st	Z, r24
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e9 5a       	subi	r30, 0xA9	; 169
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
    1b26:	91 81       	ldd	r25, Z+1	; 0x01
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <LCD_sendCommand+0x10e>
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e9 5a       	subi	r30, 0xA9	; 169
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b36:	de 01       	movw	r26, r28
    1b38:	a7 5a       	subi	r26, 0xA7	; 167
    1b3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	e7 5a       	subi	r30, 0xA7	; 167
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	11 96       	adiw	r26, 0x01	; 1
    1b4a:	9c 93       	st	X, r25
    1b4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e7 5a       	subi	r30, 0xA7	; 167
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	80 81       	ld	r24, Z
    1b56:	91 81       	ldd	r25, Z+1	; 0x01
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	d1 f6       	brne	.-76     	; 0x1b10 <LCD_sendCommand+0xf6>
    1b5c:	27 c0       	rjmp	.+78     	; 0x1bac <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5e:	8e 01       	movw	r16, r28
    1b60:	07 5a       	subi	r16, 0xA7	; 167
    1b62:	1f 4f       	sbci	r17, 0xFF	; 255
    1b64:	fe 01       	movw	r30, r28
    1b66:	e5 5a       	subi	r30, 0xA5	; 165
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	60 81       	ld	r22, Z
    1b6c:	71 81       	ldd	r23, Z+1	; 0x01
    1b6e:	82 81       	ldd	r24, Z+2	; 0x02
    1b70:	93 81       	ldd	r25, Z+3	; 0x03
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	f8 01       	movw	r30, r16
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	80 83       	st	Z, r24
    1b80:	de 01       	movw	r26, r28
    1b82:	ab 5a       	subi	r26, 0xAB	; 171
    1b84:	bf 4f       	sbci	r27, 0xFF	; 255
    1b86:	fe 01       	movw	r30, r28
    1b88:	e7 5a       	subi	r30, 0xA7	; 167
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	80 81       	ld	r24, Z
    1b8e:	91 81       	ldd	r25, Z+1	; 0x01
    1b90:	8d 93       	st	X+, r24
    1b92:	9c 93       	st	X, r25
    1b94:	fe 01       	movw	r30, r28
    1b96:	eb 5a       	subi	r30, 0xAB	; 171
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	80 81       	ld	r24, Z
    1b9c:	91 81       	ldd	r25, Z+1	; 0x01
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <LCD_sendCommand+0x184>
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	eb 5a       	subi	r30, 0xAB	; 171
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	62 e0       	ldi	r22, 0x02	; 2
    1bb0:	41 e0       	ldi	r20, 0x01	; 1
    1bb2:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	ef 5a       	subi	r30, 0xAF	; 175
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a0 e8       	ldi	r26, 0x80	; 128
    1bc2:	bf e3       	ldi	r27, 0x3F	; 63
    1bc4:	80 83       	st	Z, r24
    1bc6:	91 83       	std	Z+1, r25	; 0x01
    1bc8:	a2 83       	std	Z+2, r26	; 0x02
    1bca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bcc:	8e 01       	movw	r16, r28
    1bce:	03 5b       	subi	r16, 0xB3	; 179
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ef 5a       	subi	r30, 0xAF	; 175
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	60 81       	ld	r22, Z
    1bda:	71 81       	ldd	r23, Z+1	; 0x01
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	93 81       	ldd	r25, Z+3	; 0x03
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	4a e7       	ldi	r20, 0x7A	; 122
    1be6:	55 e4       	ldi	r21, 0x45	; 69
    1be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	f8 01       	movw	r30, r16
    1bf2:	80 83       	st	Z, r24
    1bf4:	91 83       	std	Z+1, r25	; 0x01
    1bf6:	a2 83       	std	Z+2, r26	; 0x02
    1bf8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	e3 5b       	subi	r30, 0xB3	; 179
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	60 81       	ld	r22, Z
    1c02:	71 81       	ldd	r23, Z+1	; 0x01
    1c04:	82 81       	ldd	r24, Z+2	; 0x02
    1c06:	93 81       	ldd	r25, Z+3	; 0x03
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e8       	ldi	r20, 0x80	; 128
    1c0e:	5f e3       	ldi	r21, 0x3F	; 63
    1c10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c14:	88 23       	and	r24, r24
    1c16:	44 f4       	brge	.+16     	; 0x1c28 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e5 5b       	subi	r30, 0xB5	; 181
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	91 83       	std	Z+1, r25	; 0x01
    1c24:	80 83       	st	Z, r24
    1c26:	64 c0       	rjmp	.+200    	; 0x1cf0 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1c28:	fe 01       	movw	r30, r28
    1c2a:	e3 5b       	subi	r30, 0xB3	; 179
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	3f ef       	ldi	r19, 0xFF	; 255
    1c3a:	4f e7       	ldi	r20, 0x7F	; 127
    1c3c:	57 e4       	ldi	r21, 0x47	; 71
    1c3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c42:	18 16       	cp	r1, r24
    1c44:	0c f0       	brlt	.+2      	; 0x1c48 <LCD_sendCommand+0x22e>
    1c46:	43 c0       	rjmp	.+134    	; 0x1cce <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c48:	fe 01       	movw	r30, r28
    1c4a:	ef 5a       	subi	r30, 0xAF	; 175
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	60 81       	ld	r22, Z
    1c50:	71 81       	ldd	r23, Z+1	; 0x01
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e2       	ldi	r20, 0x20	; 32
    1c5c:	51 e4       	ldi	r21, 0x41	; 65
    1c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	8e 01       	movw	r16, r28
    1c68:	05 5b       	subi	r16, 0xB5	; 181
    1c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6c:	bc 01       	movw	r22, r24
    1c6e:	cd 01       	movw	r24, r26
    1c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	f8 01       	movw	r30, r16
    1c7a:	91 83       	std	Z+1, r25	; 0x01
    1c7c:	80 83       	st	Z, r24
    1c7e:	1f c0       	rjmp	.+62     	; 0x1cbe <LCD_sendCommand+0x2a4>
    1c80:	fe 01       	movw	r30, r28
    1c82:	e7 5b       	subi	r30, 0xB7	; 183
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	80 e9       	ldi	r24, 0x90	; 144
    1c88:	91 e0       	ldi	r25, 0x01	; 1
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	80 83       	st	Z, r24
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e7 5b       	subi	r30, 0xB7	; 183
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	80 81       	ld	r24, Z
    1c96:	91 81       	ldd	r25, Z+1	; 0x01
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <LCD_sendCommand+0x27e>
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e7 5b       	subi	r30, 0xB7	; 183
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca6:	de 01       	movw	r26, r28
    1ca8:	a5 5b       	subi	r26, 0xB5	; 181
    1caa:	bf 4f       	sbci	r27, 0xFF	; 255
    1cac:	fe 01       	movw	r30, r28
    1cae:	e5 5b       	subi	r30, 0xB5	; 181
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	80 81       	ld	r24, Z
    1cb4:	91 81       	ldd	r25, Z+1	; 0x01
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	11 96       	adiw	r26, 0x01	; 1
    1cba:	9c 93       	st	X, r25
    1cbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e5 5b       	subi	r30, 0xB5	; 181
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	80 81       	ld	r24, Z
    1cc6:	91 81       	ldd	r25, Z+1	; 0x01
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	d1 f6       	brne	.-76     	; 0x1c80 <LCD_sendCommand+0x266>
    1ccc:	27 c0       	rjmp	.+78     	; 0x1d1c <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cce:	8e 01       	movw	r16, r28
    1cd0:	05 5b       	subi	r16, 0xB5	; 181
    1cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e3 5b       	subi	r30, 0xB3	; 179
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	60 81       	ld	r22, Z
    1cdc:	71 81       	ldd	r23, Z+1	; 0x01
    1cde:	82 81       	ldd	r24, Z+2	; 0x02
    1ce0:	93 81       	ldd	r25, Z+3	; 0x03
    1ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	f8 01       	movw	r30, r16
    1cec:	91 83       	std	Z+1, r25	; 0x01
    1cee:	80 83       	st	Z, r24
    1cf0:	de 01       	movw	r26, r28
    1cf2:	a9 5b       	subi	r26, 0xB9	; 185
    1cf4:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e5 5b       	subi	r30, 0xB5	; 181
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 81       	ld	r24, Z
    1cfe:	91 81       	ldd	r25, Z+1	; 0x01
    1d00:	8d 93       	st	X+, r24
    1d02:	9c 93       	st	X, r25
    1d04:	fe 01       	movw	r30, r28
    1d06:	e9 5b       	subi	r30, 0xB9	; 185
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 81       	ld	r24, Z
    1d0c:	91 81       	ldd	r25, Z+1	; 0x01
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <LCD_sendCommand+0x2f4>
    1d12:	fe 01       	movw	r30, r28
    1d14:	e9 5b       	subi	r30, 0xB9	; 185
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(a_command, 4));
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	ed 59       	subi	r30, 0x9D	; 157
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	80 81       	ld	r24, Z
    1d24:	88 2f       	mov	r24, r24
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	80 71       	andi	r24, 0x10	; 16
    1d2a:	90 70       	andi	r25, 0x00	; 0
    1d2c:	95 95       	asr	r25
    1d2e:	87 95       	ror	r24
    1d30:	95 95       	asr	r25
    1d32:	87 95       	ror	r24
    1d34:	95 95       	asr	r25
    1d36:	87 95       	ror	r24
    1d38:	95 95       	asr	r25
    1d3a:	87 95       	ror	r24
    1d3c:	98 2f       	mov	r25, r24
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	63 e0       	ldi	r22, 0x03	; 3
    1d42:	49 2f       	mov	r20, r25
    1d44:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(a_command, 5));
    1d48:	fe 01       	movw	r30, r28
    1d4a:	ed 59       	subi	r30, 0x9D	; 157
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	80 81       	ld	r24, Z
    1d50:	88 2f       	mov	r24, r24
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	80 72       	andi	r24, 0x20	; 32
    1d56:	90 70       	andi	r25, 0x00	; 0
    1d58:	95 95       	asr	r25
    1d5a:	87 95       	ror	r24
    1d5c:	95 95       	asr	r25
    1d5e:	87 95       	ror	r24
    1d60:	95 95       	asr	r25
    1d62:	87 95       	ror	r24
    1d64:	95 95       	asr	r25
    1d66:	87 95       	ror	r24
    1d68:	95 95       	asr	r25
    1d6a:	87 95       	ror	r24
    1d6c:	98 2f       	mov	r25, r24
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	64 e0       	ldi	r22, 0x04	; 4
    1d72:	49 2f       	mov	r20, r25
    1d74:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(a_command, 6));
    1d78:	fe 01       	movw	r30, r28
    1d7a:	ed 59       	subi	r30, 0x9D	; 157
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	80 81       	ld	r24, Z
    1d80:	88 2f       	mov	r24, r24
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	80 74       	andi	r24, 0x40	; 64
    1d86:	90 70       	andi	r25, 0x00	; 0
    1d88:	08 2e       	mov	r0, r24
    1d8a:	89 2f       	mov	r24, r25
    1d8c:	00 0c       	add	r0, r0
    1d8e:	88 1f       	adc	r24, r24
    1d90:	99 0b       	sbc	r25, r25
    1d92:	00 0c       	add	r0, r0
    1d94:	88 1f       	adc	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	98 2f       	mov	r25, r24
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	65 e0       	ldi	r22, 0x05	; 5
    1d9e:	49 2f       	mov	r20, r25
    1da0:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(a_command, 7));
    1da4:	fe 01       	movw	r30, r28
    1da6:	ed 59       	subi	r30, 0x9D	; 157
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	80 81       	ld	r24, Z
    1dac:	98 2f       	mov	r25, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	99 27       	eor	r25, r25
    1db2:	99 1f       	adc	r25, r25
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	66 e0       	ldi	r22, 0x06	; 6
    1db8:	49 2f       	mov	r20, r25
    1dba:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	ed 5b       	subi	r30, 0xBD	; 189
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	a0 e8       	ldi	r26, 0x80	; 128
    1dca:	bf e3       	ldi	r27, 0x3F	; 63
    1dcc:	80 83       	st	Z, r24
    1dce:	91 83       	std	Z+1, r25	; 0x01
    1dd0:	a2 83       	std	Z+2, r26	; 0x02
    1dd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd4:	8e 01       	movw	r16, r28
    1dd6:	01 5c       	subi	r16, 0xC1	; 193
    1dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dda:	fe 01       	movw	r30, r28
    1ddc:	ed 5b       	subi	r30, 0xBD	; 189
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	60 81       	ld	r22, Z
    1de2:	71 81       	ldd	r23, Z+1	; 0x01
    1de4:	82 81       	ldd	r24, Z+2	; 0x02
    1de6:	93 81       	ldd	r25, Z+3	; 0x03
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	4a e7       	ldi	r20, 0x7A	; 122
    1dee:	55 e4       	ldi	r21, 0x45	; 69
    1df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	f8 01       	movw	r30, r16
    1dfa:	80 83       	st	Z, r24
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	a2 83       	std	Z+2, r26	; 0x02
    1e00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e02:	fe 01       	movw	r30, r28
    1e04:	ff 96       	adiw	r30, 0x3f	; 63
    1e06:	60 81       	ld	r22, Z
    1e08:	71 81       	ldd	r23, Z+1	; 0x01
    1e0a:	82 81       	ldd	r24, Z+2	; 0x02
    1e0c:	93 81       	ldd	r25, Z+3	; 0x03
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e8       	ldi	r20, 0x80	; 128
    1e14:	5f e3       	ldi	r21, 0x3F	; 63
    1e16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e1a:	88 23       	and	r24, r24
    1e1c:	2c f4       	brge	.+10     	; 0x1e28 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	9e af       	std	Y+62, r25	; 0x3e
    1e24:	8d af       	std	Y+61, r24	; 0x3d
    1e26:	46 c0       	rjmp	.+140    	; 0x1eb4 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1e28:	fe 01       	movw	r30, r28
    1e2a:	ff 96       	adiw	r30, 0x3f	; 63
    1e2c:	60 81       	ld	r22, Z
    1e2e:	71 81       	ldd	r23, Z+1	; 0x01
    1e30:	82 81       	ldd	r24, Z+2	; 0x02
    1e32:	93 81       	ldd	r25, Z+3	; 0x03
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	3f ef       	ldi	r19, 0xFF	; 255
    1e38:	4f e7       	ldi	r20, 0x7F	; 127
    1e3a:	57 e4       	ldi	r21, 0x47	; 71
    1e3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e40:	18 16       	cp	r1, r24
    1e42:	64 f5       	brge	.+88     	; 0x1e9c <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e44:	fe 01       	movw	r30, r28
    1e46:	ed 5b       	subi	r30, 0xBD	; 189
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	60 81       	ld	r22, Z
    1e4c:	71 81       	ldd	r23, Z+1	; 0x01
    1e4e:	82 81       	ldd	r24, Z+2	; 0x02
    1e50:	93 81       	ldd	r25, Z+3	; 0x03
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	40 e2       	ldi	r20, 0x20	; 32
    1e58:	51 e4       	ldi	r21, 0x41	; 65
    1e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	bc 01       	movw	r22, r24
    1e64:	cd 01       	movw	r24, r26
    1e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9e af       	std	Y+62, r25	; 0x3e
    1e70:	8d af       	std	Y+61, r24	; 0x3d
    1e72:	0f c0       	rjmp	.+30     	; 0x1e92 <LCD_sendCommand+0x478>
    1e74:	80 e9       	ldi	r24, 0x90	; 144
    1e76:	91 e0       	ldi	r25, 0x01	; 1
    1e78:	9c af       	std	Y+60, r25	; 0x3c
    1e7a:	8b af       	std	Y+59, r24	; 0x3b
    1e7c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e7e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <LCD_sendCommand+0x466>
    1e84:	9c af       	std	Y+60, r25	; 0x3c
    1e86:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e88:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e8a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	9e af       	std	Y+62, r25	; 0x3e
    1e90:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e92:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e94:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	69 f7       	brne	.-38     	; 0x1e74 <LCD_sendCommand+0x45a>
    1e9a:	16 c0       	rjmp	.+44     	; 0x1ec8 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	ff 96       	adiw	r30, 0x3f	; 63
    1ea0:	60 81       	ld	r22, Z
    1ea2:	71 81       	ldd	r23, Z+1	; 0x01
    1ea4:	82 81       	ldd	r24, Z+2	; 0x02
    1ea6:	93 81       	ldd	r25, Z+3	; 0x03
    1ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	9e af       	std	Y+62, r25	; 0x3e
    1eb2:	8d af       	std	Y+61, r24	; 0x3d
    1eb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eb8:	9a af       	std	Y+58, r25	; 0x3a
    1eba:	89 af       	std	Y+57, r24	; 0x39
    1ebc:	89 ad       	ldd	r24, Y+57	; 0x39
    1ebe:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <LCD_sendCommand+0x4a6>
    1ec4:	9a af       	std	Y+58, r25	; 0x3a
    1ec6:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	62 e0       	ldi	r22, 0x02	; 2
    1ecc:	40 e0       	ldi	r20, 0x00	; 0
    1ece:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	a0 e8       	ldi	r26, 0x80	; 128
    1ed8:	bf e3       	ldi	r27, 0x3F	; 63
    1eda:	8d ab       	std	Y+53, r24	; 0x35
    1edc:	9e ab       	std	Y+54, r25	; 0x36
    1ede:	af ab       	std	Y+55, r26	; 0x37
    1ee0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ee4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ee6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ee8:	98 ad       	ldd	r25, Y+56	; 0x38
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	4a e7       	ldi	r20, 0x7A	; 122
    1ef0:	55 e4       	ldi	r21, 0x45	; 69
    1ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	89 ab       	std	Y+49, r24	; 0x31
    1efc:	9a ab       	std	Y+50, r25	; 0x32
    1efe:	ab ab       	std	Y+51, r26	; 0x33
    1f00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f02:	69 a9       	ldd	r22, Y+49	; 0x31
    1f04:	7a a9       	ldd	r23, Y+50	; 0x32
    1f06:	8b a9       	ldd	r24, Y+51	; 0x33
    1f08:	9c a9       	ldd	r25, Y+52	; 0x34
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e8       	ldi	r20, 0x80	; 128
    1f10:	5f e3       	ldi	r21, 0x3F	; 63
    1f12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f16:	88 23       	and	r24, r24
    1f18:	2c f4       	brge	.+10     	; 0x1f24 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	98 ab       	std	Y+48, r25	; 0x30
    1f20:	8f a7       	std	Y+47, r24	; 0x2f
    1f22:	3f c0       	rjmp	.+126    	; 0x1fa2 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1f24:	69 a9       	ldd	r22, Y+49	; 0x31
    1f26:	7a a9       	ldd	r23, Y+50	; 0x32
    1f28:	8b a9       	ldd	r24, Y+51	; 0x33
    1f2a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	3f ef       	ldi	r19, 0xFF	; 255
    1f30:	4f e7       	ldi	r20, 0x7F	; 127
    1f32:	57 e4       	ldi	r21, 0x47	; 71
    1f34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f38:	18 16       	cp	r1, r24
    1f3a:	4c f5       	brge	.+82     	; 0x1f8e <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f3e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f40:	8f a9       	ldd	r24, Y+55	; 0x37
    1f42:	98 ad       	ldd	r25, Y+56	; 0x38
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	40 e2       	ldi	r20, 0x20	; 32
    1f4a:	51 e4       	ldi	r21, 0x41	; 65
    1f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	bc 01       	movw	r22, r24
    1f56:	cd 01       	movw	r24, r26
    1f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	98 ab       	std	Y+48, r25	; 0x30
    1f62:	8f a7       	std	Y+47, r24	; 0x2f
    1f64:	0f c0       	rjmp	.+30     	; 0x1f84 <LCD_sendCommand+0x56a>
    1f66:	80 e9       	ldi	r24, 0x90	; 144
    1f68:	91 e0       	ldi	r25, 0x01	; 1
    1f6a:	9e a7       	std	Y+46, r25	; 0x2e
    1f6c:	8d a7       	std	Y+45, r24	; 0x2d
    1f6e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f70:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <LCD_sendCommand+0x558>
    1f76:	9e a7       	std	Y+46, r25	; 0x2e
    1f78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f7c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	98 ab       	std	Y+48, r25	; 0x30
    1f82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f86:	98 a9       	ldd	r25, Y+48	; 0x30
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	69 f7       	brne	.-38     	; 0x1f66 <LCD_sendCommand+0x54c>
    1f8c:	14 c0       	rjmp	.+40     	; 0x1fb6 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f90:	7a a9       	ldd	r23, Y+50	; 0x32
    1f92:	8b a9       	ldd	r24, Y+51	; 0x33
    1f94:	9c a9       	ldd	r25, Y+52	; 0x34
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	98 ab       	std	Y+48, r25	; 0x30
    1fa0:	8f a7       	std	Y+47, r24	; 0x2f
    1fa2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa6:	9c a7       	std	Y+44, r25	; 0x2c
    1fa8:	8b a7       	std	Y+43, r24	; 0x2b
    1faa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fac:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <LCD_sendCommand+0x594>
    1fb2:	9c a7       	std	Y+44, r25	; 0x2c
    1fb4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	62 e0       	ldi	r22, 0x02	; 2
    1fba:	41 e0       	ldi	r20, 0x01	; 1
    1fbc:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	a0 e8       	ldi	r26, 0x80	; 128
    1fc6:	bf e3       	ldi	r27, 0x3F	; 63
    1fc8:	8f a3       	std	Y+39, r24	; 0x27
    1fca:	98 a7       	std	Y+40, r25	; 0x28
    1fcc:	a9 a7       	std	Y+41, r26	; 0x29
    1fce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd0:	6f a1       	ldd	r22, Y+39	; 0x27
    1fd2:	78 a5       	ldd	r23, Y+40	; 0x28
    1fd4:	89 a5       	ldd	r24, Y+41	; 0x29
    1fd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a e7       	ldi	r20, 0x7A	; 122
    1fde:	55 e4       	ldi	r21, 0x45	; 69
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	8b a3       	std	Y+35, r24	; 0x23
    1fea:	9c a3       	std	Y+36, r25	; 0x24
    1fec:	ad a3       	std	Y+37, r26	; 0x25
    1fee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ff0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ff2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ff4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e8       	ldi	r20, 0x80	; 128
    1ffe:	5f e3       	ldi	r21, 0x3F	; 63
    2000:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2004:	88 23       	and	r24, r24
    2006:	2c f4       	brge	.+10     	; 0x2012 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9a a3       	std	Y+34, r25	; 0x22
    200e:	89 a3       	std	Y+33, r24	; 0x21
    2010:	3f c0       	rjmp	.+126    	; 0x2090 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2012:	6b a1       	ldd	r22, Y+35	; 0x23
    2014:	7c a1       	ldd	r23, Y+36	; 0x24
    2016:	8d a1       	ldd	r24, Y+37	; 0x25
    2018:	9e a1       	ldd	r25, Y+38	; 0x26
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	3f ef       	ldi	r19, 0xFF	; 255
    201e:	4f e7       	ldi	r20, 0x7F	; 127
    2020:	57 e4       	ldi	r21, 0x47	; 71
    2022:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2026:	18 16       	cp	r1, r24
    2028:	4c f5       	brge	.+82     	; 0x207c <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202a:	6f a1       	ldd	r22, Y+39	; 0x27
    202c:	78 a5       	ldd	r23, Y+40	; 0x28
    202e:	89 a5       	ldd	r24, Y+41	; 0x29
    2030:	9a a5       	ldd	r25, Y+42	; 0x2a
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e2       	ldi	r20, 0x20	; 32
    2038:	51 e4       	ldi	r21, 0x41	; 65
    203a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	9a a3       	std	Y+34, r25	; 0x22
    2050:	89 a3       	std	Y+33, r24	; 0x21
    2052:	0f c0       	rjmp	.+30     	; 0x2072 <LCD_sendCommand+0x658>
    2054:	80 e9       	ldi	r24, 0x90	; 144
    2056:	91 e0       	ldi	r25, 0x01	; 1
    2058:	98 a3       	std	Y+32, r25	; 0x20
    205a:	8f 8f       	std	Y+31, r24	; 0x1f
    205c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    205e:	98 a1       	ldd	r25, Y+32	; 0x20
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <LCD_sendCommand+0x646>
    2064:	98 a3       	std	Y+32, r25	; 0x20
    2066:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2068:	89 a1       	ldd	r24, Y+33	; 0x21
    206a:	9a a1       	ldd	r25, Y+34	; 0x22
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	9a a3       	std	Y+34, r25	; 0x22
    2070:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2072:	89 a1       	ldd	r24, Y+33	; 0x21
    2074:	9a a1       	ldd	r25, Y+34	; 0x22
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	69 f7       	brne	.-38     	; 0x2054 <LCD_sendCommand+0x63a>
    207a:	14 c0       	rjmp	.+40     	; 0x20a4 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207c:	6b a1       	ldd	r22, Y+35	; 0x23
    207e:	7c a1       	ldd	r23, Y+36	; 0x24
    2080:	8d a1       	ldd	r24, Y+37	; 0x25
    2082:	9e a1       	ldd	r25, Y+38	; 0x26
    2084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9a a3       	std	Y+34, r25	; 0x22
    208e:	89 a3       	std	Y+33, r24	; 0x21
    2090:	89 a1       	ldd	r24, Y+33	; 0x21
    2092:	9a a1       	ldd	r25, Y+34	; 0x22
    2094:	9e 8f       	std	Y+30, r25	; 0x1e
    2096:	8d 8f       	std	Y+29, r24	; 0x1d
    2098:	8d 8d       	ldd	r24, Y+29	; 0x1d
    209a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_sendCommand+0x682>
    20a0:	9e 8f       	std	Y+30, r25	; 0x1e
    20a2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(a_command, 0));
    20a4:	fe 01       	movw	r30, r28
    20a6:	ed 59       	subi	r30, 0x9D	; 157
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	80 81       	ld	r24, Z
    20ac:	98 2f       	mov	r25, r24
    20ae:	91 70       	andi	r25, 0x01	; 1
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	63 e0       	ldi	r22, 0x03	; 3
    20b4:	49 2f       	mov	r20, r25
    20b6:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(a_command, 1));
    20ba:	fe 01       	movw	r30, r28
    20bc:	ed 59       	subi	r30, 0x9D	; 157
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	80 81       	ld	r24, Z
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	82 70       	andi	r24, 0x02	; 2
    20c8:	90 70       	andi	r25, 0x00	; 0
    20ca:	95 95       	asr	r25
    20cc:	87 95       	ror	r24
    20ce:	98 2f       	mov	r25, r24
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	64 e0       	ldi	r22, 0x04	; 4
    20d4:	49 2f       	mov	r20, r25
    20d6:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(a_command, 2));
    20da:	fe 01       	movw	r30, r28
    20dc:	ed 59       	subi	r30, 0x9D	; 157
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	80 81       	ld	r24, Z
    20e2:	88 2f       	mov	r24, r24
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	84 70       	andi	r24, 0x04	; 4
    20e8:	90 70       	andi	r25, 0x00	; 0
    20ea:	95 95       	asr	r25
    20ec:	87 95       	ror	r24
    20ee:	95 95       	asr	r25
    20f0:	87 95       	ror	r24
    20f2:	98 2f       	mov	r25, r24
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	65 e0       	ldi	r22, 0x05	; 5
    20f8:	49 2f       	mov	r20, r25
    20fa:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(a_command, 3));
    20fe:	fe 01       	movw	r30, r28
    2100:	ed 59       	subi	r30, 0x9D	; 157
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	80 81       	ld	r24, Z
    2106:	88 2f       	mov	r24, r24
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	88 70       	andi	r24, 0x08	; 8
    210c:	90 70       	andi	r25, 0x00	; 0
    210e:	95 95       	asr	r25
    2110:	87 95       	ror	r24
    2112:	95 95       	asr	r25
    2114:	87 95       	ror	r24
    2116:	95 95       	asr	r25
    2118:	87 95       	ror	r24
    211a:	98 2f       	mov	r25, r24
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	66 e0       	ldi	r22, 0x06	; 6
    2120:	49 2f       	mov	r20, r25
    2122:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	a0 e8       	ldi	r26, 0x80	; 128
    212c:	bf e3       	ldi	r27, 0x3F	; 63
    212e:	89 8f       	std	Y+25, r24	; 0x19
    2130:	9a 8f       	std	Y+26, r25	; 0x1a
    2132:	ab 8f       	std	Y+27, r26	; 0x1b
    2134:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2136:	69 8d       	ldd	r22, Y+25	; 0x19
    2138:	7a 8d       	ldd	r23, Y+26	; 0x1a
    213a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    213c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	4a e7       	ldi	r20, 0x7A	; 122
    2144:	55 e4       	ldi	r21, 0x45	; 69
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	8d 8b       	std	Y+21, r24	; 0x15
    2150:	9e 8b       	std	Y+22, r25	; 0x16
    2152:	af 8b       	std	Y+23, r26	; 0x17
    2154:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2156:	6d 89       	ldd	r22, Y+21	; 0x15
    2158:	7e 89       	ldd	r23, Y+22	; 0x16
    215a:	8f 89       	ldd	r24, Y+23	; 0x17
    215c:	98 8d       	ldd	r25, Y+24	; 0x18
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e8       	ldi	r20, 0x80	; 128
    2164:	5f e3       	ldi	r21, 0x3F	; 63
    2166:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216a:	88 23       	and	r24, r24
    216c:	2c f4       	brge	.+10     	; 0x2178 <LCD_sendCommand+0x75e>
		__ticks = 1;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9c 8b       	std	Y+20, r25	; 0x14
    2174:	8b 8b       	std	Y+19, r24	; 0x13
    2176:	3f c0       	rjmp	.+126    	; 0x21f6 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2178:	6d 89       	ldd	r22, Y+21	; 0x15
    217a:	7e 89       	ldd	r23, Y+22	; 0x16
    217c:	8f 89       	ldd	r24, Y+23	; 0x17
    217e:	98 8d       	ldd	r25, Y+24	; 0x18
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	3f ef       	ldi	r19, 0xFF	; 255
    2184:	4f e7       	ldi	r20, 0x7F	; 127
    2186:	57 e4       	ldi	r21, 0x47	; 71
    2188:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    218c:	18 16       	cp	r1, r24
    218e:	4c f5       	brge	.+82     	; 0x21e2 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2190:	69 8d       	ldd	r22, Y+25	; 0x19
    2192:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2194:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2196:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e2       	ldi	r20, 0x20	; 32
    219e:	51 e4       	ldi	r21, 0x41	; 65
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	bc 01       	movw	r22, r24
    21aa:	cd 01       	movw	r24, r26
    21ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	9c 8b       	std	Y+20, r25	; 0x14
    21b6:	8b 8b       	std	Y+19, r24	; 0x13
    21b8:	0f c0       	rjmp	.+30     	; 0x21d8 <LCD_sendCommand+0x7be>
    21ba:	80 e9       	ldi	r24, 0x90	; 144
    21bc:	91 e0       	ldi	r25, 0x01	; 1
    21be:	9a 8b       	std	Y+18, r25	; 0x12
    21c0:	89 8b       	std	Y+17, r24	; 0x11
    21c2:	89 89       	ldd	r24, Y+17	; 0x11
    21c4:	9a 89       	ldd	r25, Y+18	; 0x12
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <LCD_sendCommand+0x7ac>
    21ca:	9a 8b       	std	Y+18, r25	; 0x12
    21cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ce:	8b 89       	ldd	r24, Y+19	; 0x13
    21d0:	9c 89       	ldd	r25, Y+20	; 0x14
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	9c 8b       	std	Y+20, r25	; 0x14
    21d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d8:	8b 89       	ldd	r24, Y+19	; 0x13
    21da:	9c 89       	ldd	r25, Y+20	; 0x14
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	69 f7       	brne	.-38     	; 0x21ba <LCD_sendCommand+0x7a0>
    21e0:	14 c0       	rjmp	.+40     	; 0x220a <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e2:	6d 89       	ldd	r22, Y+21	; 0x15
    21e4:	7e 89       	ldd	r23, Y+22	; 0x16
    21e6:	8f 89       	ldd	r24, Y+23	; 0x17
    21e8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
    21f6:	8b 89       	ldd	r24, Y+19	; 0x13
    21f8:	9c 89       	ldd	r25, Y+20	; 0x14
    21fa:	98 8b       	std	Y+16, r25	; 0x10
    21fc:	8f 87       	std	Y+15, r24	; 0x0f
    21fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2200:	98 89       	ldd	r25, Y+16	; 0x10
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <LCD_sendCommand+0x7e8>
    2206:	98 8b       	std	Y+16, r25	; 0x10
    2208:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	62 e0       	ldi	r22, 0x02	; 2
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a0 e8       	ldi	r26, 0x80	; 128
    221a:	bf e3       	ldi	r27, 0x3F	; 63
    221c:	8b 87       	std	Y+11, r24	; 0x0b
    221e:	9c 87       	std	Y+12, r25	; 0x0c
    2220:	ad 87       	std	Y+13, r26	; 0x0d
    2222:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2224:	6b 85       	ldd	r22, Y+11	; 0x0b
    2226:	7c 85       	ldd	r23, Y+12	; 0x0c
    2228:	8d 85       	ldd	r24, Y+13	; 0x0d
    222a:	9e 85       	ldd	r25, Y+14	; 0x0e
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	4a e7       	ldi	r20, 0x7A	; 122
    2232:	55 e4       	ldi	r21, 0x45	; 69
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	8f 83       	std	Y+7, r24	; 0x07
    223e:	98 87       	std	Y+8, r25	; 0x08
    2240:	a9 87       	std	Y+9, r26	; 0x09
    2242:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2244:	6f 81       	ldd	r22, Y+7	; 0x07
    2246:	78 85       	ldd	r23, Y+8	; 0x08
    2248:	89 85       	ldd	r24, Y+9	; 0x09
    224a:	9a 85       	ldd	r25, Y+10	; 0x0a
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	2c f4       	brge	.+10     	; 0x2266 <LCD_sendCommand+0x84c>
		__ticks = 1;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	9e 83       	std	Y+6, r25	; 0x06
    2262:	8d 83       	std	Y+5, r24	; 0x05
    2264:	3f c0       	rjmp	.+126    	; 0x22e4 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2266:	6f 81       	ldd	r22, Y+7	; 0x07
    2268:	78 85       	ldd	r23, Y+8	; 0x08
    226a:	89 85       	ldd	r24, Y+9	; 0x09
    226c:	9a 85       	ldd	r25, Y+10	; 0x0a
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	3f ef       	ldi	r19, 0xFF	; 255
    2272:	4f e7       	ldi	r20, 0x7F	; 127
    2274:	57 e4       	ldi	r21, 0x47	; 71
    2276:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    227a:	18 16       	cp	r1, r24
    227c:	4c f5       	brge	.+82     	; 0x22d0 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2280:	7c 85       	ldd	r23, Y+12	; 0x0c
    2282:	8d 85       	ldd	r24, Y+13	; 0x0d
    2284:	9e 85       	ldd	r25, Y+14	; 0x0e
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
    22a6:	0f c0       	rjmp	.+30     	; 0x22c6 <LCD_sendCommand+0x8ac>
    22a8:	80 e9       	ldi	r24, 0x90	; 144
    22aa:	91 e0       	ldi	r25, 0x01	; 1
    22ac:	9c 83       	std	Y+4, r25	; 0x04
    22ae:	8b 83       	std	Y+3, r24	; 0x03
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <LCD_sendCommand+0x89a>
    22b8:	9c 83       	std	Y+4, r25	; 0x04
    22ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22bc:	8d 81       	ldd	r24, Y+5	; 0x05
    22be:	9e 81       	ldd	r25, Y+6	; 0x06
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	9e 83       	std	Y+6, r25	; 0x06
    22c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	69 f7       	brne	.-38     	; 0x22a8 <LCD_sendCommand+0x88e>
    22ce:	14 c0       	rjmp	.+40     	; 0x22f8 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d0:	6f 81       	ldd	r22, Y+7	; 0x07
    22d2:	78 85       	ldd	r23, Y+8	; 0x08
    22d4:	89 85       	ldd	r24, Y+9	; 0x09
    22d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9e 83       	std	Y+6, r25	; 0x06
    22e2:	8d 83       	std	Y+5, r24	; 0x05
    22e4:	8d 81       	ldd	r24, Y+5	; 0x05
    22e6:	9e 81       	ldd	r25, Y+6	; 0x06
    22e8:	9a 83       	std	Y+2, r25	; 0x02
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	9a 81       	ldd	r25, Y+2	; 0x02
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <LCD_sendCommand+0x8d6>
    22f4:	9a 83       	std	Y+2, r25	; 0x02
    22f6:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID, a_command);		   /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1);										   /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1);										   /* delay for processing Th = 13ns */
#endif
}
    22f8:	cd 59       	subi	r28, 0x9D	; 157
    22fa:	df 4f       	sbci	r29, 0xFF	; 255
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	f8 94       	cli
    2300:	de bf       	out	0x3e, r29	; 62
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	cd bf       	out	0x3d, r28	; 61
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	1f 91       	pop	r17
    230c:	0f 91       	pop	r16
    230e:	08 95       	ret

00002310 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 a_data)
{
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	c3 56       	subi	r28, 0x63	; 99
    231e:	d0 40       	sbci	r29, 0x00	; 0
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	fe 01       	movw	r30, r28
    232c:	ed 59       	subi	r30, 0x9D	; 157
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	61 e0       	ldi	r22, 0x01	; 1
    2336:	41 e0       	ldi	r20, 0x01	; 1
    2338:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
    233c:	fe 01       	movw	r30, r28
    233e:	e1 5a       	subi	r30, 0xA1	; 161
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	a0 e8       	ldi	r26, 0x80	; 128
    2348:	bf e3       	ldi	r27, 0x3F	; 63
    234a:	80 83       	st	Z, r24
    234c:	91 83       	std	Z+1, r25	; 0x01
    234e:	a2 83       	std	Z+2, r26	; 0x02
    2350:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2352:	8e 01       	movw	r16, r28
    2354:	05 5a       	subi	r16, 0xA5	; 165
    2356:	1f 4f       	sbci	r17, 0xFF	; 255
    2358:	fe 01       	movw	r30, r28
    235a:	e1 5a       	subi	r30, 0xA1	; 161
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	60 81       	ld	r22, Z
    2360:	71 81       	ldd	r23, Z+1	; 0x01
    2362:	82 81       	ldd	r24, Z+2	; 0x02
    2364:	93 81       	ldd	r25, Z+3	; 0x03
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	4a e7       	ldi	r20, 0x7A	; 122
    236c:	55 e4       	ldi	r21, 0x45	; 69
    236e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	f8 01       	movw	r30, r16
    2378:	80 83       	st	Z, r24
    237a:	91 83       	std	Z+1, r25	; 0x01
    237c:	a2 83       	std	Z+2, r26	; 0x02
    237e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2380:	fe 01       	movw	r30, r28
    2382:	e5 5a       	subi	r30, 0xA5	; 165
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e8       	ldi	r20, 0x80	; 128
    2394:	5f e3       	ldi	r21, 0x3F	; 63
    2396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    239a:	88 23       	and	r24, r24
    239c:	44 f4       	brge	.+16     	; 0x23ae <LCD_displayCharacter+0x9e>
		__ticks = 1;
    239e:	fe 01       	movw	r30, r28
    23a0:	e7 5a       	subi	r30, 0xA7	; 167
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	91 83       	std	Z+1, r25	; 0x01
    23aa:	80 83       	st	Z, r24
    23ac:	64 c0       	rjmp	.+200    	; 0x2476 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    23ae:	fe 01       	movw	r30, r28
    23b0:	e5 5a       	subi	r30, 0xA5	; 165
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	60 81       	ld	r22, Z
    23b6:	71 81       	ldd	r23, Z+1	; 0x01
    23b8:	82 81       	ldd	r24, Z+2	; 0x02
    23ba:	93 81       	ldd	r25, Z+3	; 0x03
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	3f ef       	ldi	r19, 0xFF	; 255
    23c0:	4f e7       	ldi	r20, 0x7F	; 127
    23c2:	57 e4       	ldi	r21, 0x47	; 71
    23c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c8:	18 16       	cp	r1, r24
    23ca:	0c f0       	brlt	.+2      	; 0x23ce <LCD_displayCharacter+0xbe>
    23cc:	43 c0       	rjmp	.+134    	; 0x2454 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ce:	fe 01       	movw	r30, r28
    23d0:	e1 5a       	subi	r30, 0xA1	; 161
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	60 81       	ld	r22, Z
    23d6:	71 81       	ldd	r23, Z+1	; 0x01
    23d8:	82 81       	ldd	r24, Z+2	; 0x02
    23da:	93 81       	ldd	r25, Z+3	; 0x03
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e2       	ldi	r20, 0x20	; 32
    23e2:	51 e4       	ldi	r21, 0x41	; 65
    23e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	8e 01       	movw	r16, r28
    23ee:	07 5a       	subi	r16, 0xA7	; 167
    23f0:	1f 4f       	sbci	r17, 0xFF	; 255
    23f2:	bc 01       	movw	r22, r24
    23f4:	cd 01       	movw	r24, r26
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	f8 01       	movw	r30, r16
    2400:	91 83       	std	Z+1, r25	; 0x01
    2402:	80 83       	st	Z, r24
    2404:	1f c0       	rjmp	.+62     	; 0x2444 <LCD_displayCharacter+0x134>
    2406:	fe 01       	movw	r30, r28
    2408:	e9 5a       	subi	r30, 0xA9	; 169
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 e9       	ldi	r24, 0x90	; 144
    240e:	91 e0       	ldi	r25, 0x01	; 1
    2410:	91 83       	std	Z+1, r25	; 0x01
    2412:	80 83       	st	Z, r24
    2414:	fe 01       	movw	r30, r28
    2416:	e9 5a       	subi	r30, 0xA9	; 169
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 81       	ld	r24, Z
    241c:	91 81       	ldd	r25, Z+1	; 0x01
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <LCD_displayCharacter+0x10e>
    2422:	fe 01       	movw	r30, r28
    2424:	e9 5a       	subi	r30, 0xA9	; 169
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242c:	de 01       	movw	r26, r28
    242e:	a7 5a       	subi	r26, 0xA7	; 167
    2430:	bf 4f       	sbci	r27, 0xFF	; 255
    2432:	fe 01       	movw	r30, r28
    2434:	e7 5a       	subi	r30, 0xA7	; 167
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 81       	ld	r24, Z
    243a:	91 81       	ldd	r25, Z+1	; 0x01
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	11 96       	adiw	r26, 0x01	; 1
    2440:	9c 93       	st	X, r25
    2442:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2444:	fe 01       	movw	r30, r28
    2446:	e7 5a       	subi	r30, 0xA7	; 167
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	80 81       	ld	r24, Z
    244c:	91 81       	ldd	r25, Z+1	; 0x01
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	d1 f6       	brne	.-76     	; 0x2406 <LCD_displayCharacter+0xf6>
    2452:	27 c0       	rjmp	.+78     	; 0x24a2 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2454:	8e 01       	movw	r16, r28
    2456:	07 5a       	subi	r16, 0xA7	; 167
    2458:	1f 4f       	sbci	r17, 0xFF	; 255
    245a:	fe 01       	movw	r30, r28
    245c:	e5 5a       	subi	r30, 0xA5	; 165
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	60 81       	ld	r22, Z
    2462:	71 81       	ldd	r23, Z+1	; 0x01
    2464:	82 81       	ldd	r24, Z+2	; 0x02
    2466:	93 81       	ldd	r25, Z+3	; 0x03
    2468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	f8 01       	movw	r30, r16
    2472:	91 83       	std	Z+1, r25	; 0x01
    2474:	80 83       	st	Z, r24
    2476:	de 01       	movw	r26, r28
    2478:	ab 5a       	subi	r26, 0xAB	; 171
    247a:	bf 4f       	sbci	r27, 0xFF	; 255
    247c:	fe 01       	movw	r30, r28
    247e:	e7 5a       	subi	r30, 0xA7	; 167
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	80 81       	ld	r24, Z
    2484:	91 81       	ldd	r25, Z+1	; 0x01
    2486:	8d 93       	st	X+, r24
    2488:	9c 93       	st	X, r25
    248a:	fe 01       	movw	r30, r28
    248c:	eb 5a       	subi	r30, 0xAB	; 171
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	80 81       	ld	r24, Z
    2492:	91 81       	ldd	r25, Z+1	; 0x01
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <LCD_displayCharacter+0x184>
    2498:	fe 01       	movw	r30, r28
    249a:	eb 5a       	subi	r30, 0xAB	; 171
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	91 83       	std	Z+1, r25	; 0x01
    24a0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	62 e0       	ldi	r22, 0x02	; 2
    24a6:	41 e0       	ldi	r20, 0x01	; 1
    24a8:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
    24ac:	fe 01       	movw	r30, r28
    24ae:	ef 5a       	subi	r30, 0xAF	; 175
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	a0 e8       	ldi	r26, 0x80	; 128
    24b8:	bf e3       	ldi	r27, 0x3F	; 63
    24ba:	80 83       	st	Z, r24
    24bc:	91 83       	std	Z+1, r25	; 0x01
    24be:	a2 83       	std	Z+2, r26	; 0x02
    24c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c2:	8e 01       	movw	r16, r28
    24c4:	03 5b       	subi	r16, 0xB3	; 179
    24c6:	1f 4f       	sbci	r17, 0xFF	; 255
    24c8:	fe 01       	movw	r30, r28
    24ca:	ef 5a       	subi	r30, 0xAF	; 175
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	60 81       	ld	r22, Z
    24d0:	71 81       	ldd	r23, Z+1	; 0x01
    24d2:	82 81       	ldd	r24, Z+2	; 0x02
    24d4:	93 81       	ldd	r25, Z+3	; 0x03
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	4a e7       	ldi	r20, 0x7A	; 122
    24dc:	55 e4       	ldi	r21, 0x45	; 69
    24de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	f8 01       	movw	r30, r16
    24e8:	80 83       	st	Z, r24
    24ea:	91 83       	std	Z+1, r25	; 0x01
    24ec:	a2 83       	std	Z+2, r26	; 0x02
    24ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24f0:	fe 01       	movw	r30, r28
    24f2:	e3 5b       	subi	r30, 0xB3	; 179
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	60 81       	ld	r22, Z
    24f8:	71 81       	ldd	r23, Z+1	; 0x01
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	93 81       	ldd	r25, Z+3	; 0x03
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e8       	ldi	r20, 0x80	; 128
    2504:	5f e3       	ldi	r21, 0x3F	; 63
    2506:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    250a:	88 23       	and	r24, r24
    250c:	44 f4       	brge	.+16     	; 0x251e <LCD_displayCharacter+0x20e>
		__ticks = 1;
    250e:	fe 01       	movw	r30, r28
    2510:	e5 5b       	subi	r30, 0xB5	; 181
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	91 83       	std	Z+1, r25	; 0x01
    251a:	80 83       	st	Z, r24
    251c:	64 c0       	rjmp	.+200    	; 0x25e6 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    251e:	fe 01       	movw	r30, r28
    2520:	e3 5b       	subi	r30, 0xB3	; 179
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	60 81       	ld	r22, Z
    2526:	71 81       	ldd	r23, Z+1	; 0x01
    2528:	82 81       	ldd	r24, Z+2	; 0x02
    252a:	93 81       	ldd	r25, Z+3	; 0x03
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	3f ef       	ldi	r19, 0xFF	; 255
    2530:	4f e7       	ldi	r20, 0x7F	; 127
    2532:	57 e4       	ldi	r21, 0x47	; 71
    2534:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2538:	18 16       	cp	r1, r24
    253a:	0c f0       	brlt	.+2      	; 0x253e <LCD_displayCharacter+0x22e>
    253c:	43 c0       	rjmp	.+134    	; 0x25c4 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253e:	fe 01       	movw	r30, r28
    2540:	ef 5a       	subi	r30, 0xAF	; 175
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	60 81       	ld	r22, Z
    2546:	71 81       	ldd	r23, Z+1	; 0x01
    2548:	82 81       	ldd	r24, Z+2	; 0x02
    254a:	93 81       	ldd	r25, Z+3	; 0x03
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e2       	ldi	r20, 0x20	; 32
    2552:	51 e4       	ldi	r21, 0x41	; 65
    2554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	8e 01       	movw	r16, r28
    255e:	05 5b       	subi	r16, 0xB5	; 181
    2560:	1f 4f       	sbci	r17, 0xFF	; 255
    2562:	bc 01       	movw	r22, r24
    2564:	cd 01       	movw	r24, r26
    2566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	f8 01       	movw	r30, r16
    2570:	91 83       	std	Z+1, r25	; 0x01
    2572:	80 83       	st	Z, r24
    2574:	1f c0       	rjmp	.+62     	; 0x25b4 <LCD_displayCharacter+0x2a4>
    2576:	fe 01       	movw	r30, r28
    2578:	e7 5b       	subi	r30, 0xB7	; 183
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	80 e9       	ldi	r24, 0x90	; 144
    257e:	91 e0       	ldi	r25, 0x01	; 1
    2580:	91 83       	std	Z+1, r25	; 0x01
    2582:	80 83       	st	Z, r24
    2584:	fe 01       	movw	r30, r28
    2586:	e7 5b       	subi	r30, 0xB7	; 183
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	80 81       	ld	r24, Z
    258c:	91 81       	ldd	r25, Z+1	; 0x01
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	f1 f7       	brne	.-4      	; 0x258e <LCD_displayCharacter+0x27e>
    2592:	fe 01       	movw	r30, r28
    2594:	e7 5b       	subi	r30, 0xB7	; 183
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	91 83       	std	Z+1, r25	; 0x01
    259a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259c:	de 01       	movw	r26, r28
    259e:	a5 5b       	subi	r26, 0xB5	; 181
    25a0:	bf 4f       	sbci	r27, 0xFF	; 255
    25a2:	fe 01       	movw	r30, r28
    25a4:	e5 5b       	subi	r30, 0xB5	; 181
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	80 81       	ld	r24, Z
    25aa:	91 81       	ldd	r25, Z+1	; 0x01
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	11 96       	adiw	r26, 0x01	; 1
    25b0:	9c 93       	st	X, r25
    25b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b4:	fe 01       	movw	r30, r28
    25b6:	e5 5b       	subi	r30, 0xB5	; 181
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	91 81       	ldd	r25, Z+1	; 0x01
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	d1 f6       	brne	.-76     	; 0x2576 <LCD_displayCharacter+0x266>
    25c2:	27 c0       	rjmp	.+78     	; 0x2612 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c4:	8e 01       	movw	r16, r28
    25c6:	05 5b       	subi	r16, 0xB5	; 181
    25c8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ca:	fe 01       	movw	r30, r28
    25cc:	e3 5b       	subi	r30, 0xB3	; 179
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	60 81       	ld	r22, Z
    25d2:	71 81       	ldd	r23, Z+1	; 0x01
    25d4:	82 81       	ldd	r24, Z+2	; 0x02
    25d6:	93 81       	ldd	r25, Z+3	; 0x03
    25d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	f8 01       	movw	r30, r16
    25e2:	91 83       	std	Z+1, r25	; 0x01
    25e4:	80 83       	st	Z, r24
    25e6:	de 01       	movw	r26, r28
    25e8:	a9 5b       	subi	r26, 0xB9	; 185
    25ea:	bf 4f       	sbci	r27, 0xFF	; 255
    25ec:	fe 01       	movw	r30, r28
    25ee:	e5 5b       	subi	r30, 0xB5	; 181
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	80 81       	ld	r24, Z
    25f4:	91 81       	ldd	r25, Z+1	; 0x01
    25f6:	8d 93       	st	X+, r24
    25f8:	9c 93       	st	X, r25
    25fa:	fe 01       	movw	r30, r28
    25fc:	e9 5b       	subi	r30, 0xB9	; 185
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	80 81       	ld	r24, Z
    2602:	91 81       	ldd	r25, Z+1	; 0x01
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <LCD_displayCharacter+0x2f4>
    2608:	fe 01       	movw	r30, r28
    260a:	e9 5b       	subi	r30, 0xB9	; 185
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	91 83       	std	Z+1, r25	; 0x01
    2610:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(a_data, 4));
    2612:	fe 01       	movw	r30, r28
    2614:	ed 59       	subi	r30, 0x9D	; 157
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	80 81       	ld	r24, Z
    261a:	88 2f       	mov	r24, r24
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	80 71       	andi	r24, 0x10	; 16
    2620:	90 70       	andi	r25, 0x00	; 0
    2622:	95 95       	asr	r25
    2624:	87 95       	ror	r24
    2626:	95 95       	asr	r25
    2628:	87 95       	ror	r24
    262a:	95 95       	asr	r25
    262c:	87 95       	ror	r24
    262e:	95 95       	asr	r25
    2630:	87 95       	ror	r24
    2632:	98 2f       	mov	r25, r24
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	63 e0       	ldi	r22, 0x03	; 3
    2638:	49 2f       	mov	r20, r25
    263a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(a_data, 5));
    263e:	fe 01       	movw	r30, r28
    2640:	ed 59       	subi	r30, 0x9D	; 157
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 81       	ld	r24, Z
    2646:	88 2f       	mov	r24, r24
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	80 72       	andi	r24, 0x20	; 32
    264c:	90 70       	andi	r25, 0x00	; 0
    264e:	95 95       	asr	r25
    2650:	87 95       	ror	r24
    2652:	95 95       	asr	r25
    2654:	87 95       	ror	r24
    2656:	95 95       	asr	r25
    2658:	87 95       	ror	r24
    265a:	95 95       	asr	r25
    265c:	87 95       	ror	r24
    265e:	95 95       	asr	r25
    2660:	87 95       	ror	r24
    2662:	98 2f       	mov	r25, r24
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	64 e0       	ldi	r22, 0x04	; 4
    2668:	49 2f       	mov	r20, r25
    266a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(a_data, 6));
    266e:	fe 01       	movw	r30, r28
    2670:	ed 59       	subi	r30, 0x9D	; 157
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	80 81       	ld	r24, Z
    2676:	88 2f       	mov	r24, r24
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	80 74       	andi	r24, 0x40	; 64
    267c:	90 70       	andi	r25, 0x00	; 0
    267e:	08 2e       	mov	r0, r24
    2680:	89 2f       	mov	r24, r25
    2682:	00 0c       	add	r0, r0
    2684:	88 1f       	adc	r24, r24
    2686:	99 0b       	sbc	r25, r25
    2688:	00 0c       	add	r0, r0
    268a:	88 1f       	adc	r24, r24
    268c:	99 1f       	adc	r25, r25
    268e:	98 2f       	mov	r25, r24
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	65 e0       	ldi	r22, 0x05	; 5
    2694:	49 2f       	mov	r20, r25
    2696:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(a_data, 7));
    269a:	fe 01       	movw	r30, r28
    269c:	ed 59       	subi	r30, 0x9D	; 157
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	80 81       	ld	r24, Z
    26a2:	98 2f       	mov	r25, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	99 27       	eor	r25, r25
    26a8:	99 1f       	adc	r25, r25
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	66 e0       	ldi	r22, 0x06	; 6
    26ae:	49 2f       	mov	r20, r25
    26b0:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
    26b4:	fe 01       	movw	r30, r28
    26b6:	ed 5b       	subi	r30, 0xBD	; 189
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	a0 e8       	ldi	r26, 0x80	; 128
    26c0:	bf e3       	ldi	r27, 0x3F	; 63
    26c2:	80 83       	st	Z, r24
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	a2 83       	std	Z+2, r26	; 0x02
    26c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ca:	8e 01       	movw	r16, r28
    26cc:	01 5c       	subi	r16, 0xC1	; 193
    26ce:	1f 4f       	sbci	r17, 0xFF	; 255
    26d0:	fe 01       	movw	r30, r28
    26d2:	ed 5b       	subi	r30, 0xBD	; 189
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	60 81       	ld	r22, Z
    26d8:	71 81       	ldd	r23, Z+1	; 0x01
    26da:	82 81       	ldd	r24, Z+2	; 0x02
    26dc:	93 81       	ldd	r25, Z+3	; 0x03
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	4a e7       	ldi	r20, 0x7A	; 122
    26e4:	55 e4       	ldi	r21, 0x45	; 69
    26e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	f8 01       	movw	r30, r16
    26f0:	80 83       	st	Z, r24
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	a2 83       	std	Z+2, r26	; 0x02
    26f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26f8:	fe 01       	movw	r30, r28
    26fa:	ff 96       	adiw	r30, 0x3f	; 63
    26fc:	60 81       	ld	r22, Z
    26fe:	71 81       	ldd	r23, Z+1	; 0x01
    2700:	82 81       	ldd	r24, Z+2	; 0x02
    2702:	93 81       	ldd	r25, Z+3	; 0x03
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e8       	ldi	r20, 0x80	; 128
    270a:	5f e3       	ldi	r21, 0x3F	; 63
    270c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2710:	88 23       	and	r24, r24
    2712:	2c f4       	brge	.+10     	; 0x271e <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	9e af       	std	Y+62, r25	; 0x3e
    271a:	8d af       	std	Y+61, r24	; 0x3d
    271c:	46 c0       	rjmp	.+140    	; 0x27aa <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    271e:	fe 01       	movw	r30, r28
    2720:	ff 96       	adiw	r30, 0x3f	; 63
    2722:	60 81       	ld	r22, Z
    2724:	71 81       	ldd	r23, Z+1	; 0x01
    2726:	82 81       	ldd	r24, Z+2	; 0x02
    2728:	93 81       	ldd	r25, Z+3	; 0x03
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	3f ef       	ldi	r19, 0xFF	; 255
    272e:	4f e7       	ldi	r20, 0x7F	; 127
    2730:	57 e4       	ldi	r21, 0x47	; 71
    2732:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2736:	18 16       	cp	r1, r24
    2738:	64 f5       	brge	.+88     	; 0x2792 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273a:	fe 01       	movw	r30, r28
    273c:	ed 5b       	subi	r30, 0xBD	; 189
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	60 81       	ld	r22, Z
    2742:	71 81       	ldd	r23, Z+1	; 0x01
    2744:	82 81       	ldd	r24, Z+2	; 0x02
    2746:	93 81       	ldd	r25, Z+3	; 0x03
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e2       	ldi	r20, 0x20	; 32
    274e:	51 e4       	ldi	r21, 0x41	; 65
    2750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	bc 01       	movw	r22, r24
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	9e af       	std	Y+62, r25	; 0x3e
    2766:	8d af       	std	Y+61, r24	; 0x3d
    2768:	0f c0       	rjmp	.+30     	; 0x2788 <LCD_displayCharacter+0x478>
    276a:	80 e9       	ldi	r24, 0x90	; 144
    276c:	91 e0       	ldi	r25, 0x01	; 1
    276e:	9c af       	std	Y+60, r25	; 0x3c
    2770:	8b af       	std	Y+59, r24	; 0x3b
    2772:	8b ad       	ldd	r24, Y+59	; 0x3b
    2774:	9c ad       	ldd	r25, Y+60	; 0x3c
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <LCD_displayCharacter+0x466>
    277a:	9c af       	std	Y+60, r25	; 0x3c
    277c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2780:	9e ad       	ldd	r25, Y+62	; 0x3e
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	9e af       	std	Y+62, r25	; 0x3e
    2786:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2788:	8d ad       	ldd	r24, Y+61	; 0x3d
    278a:	9e ad       	ldd	r25, Y+62	; 0x3e
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	69 f7       	brne	.-38     	; 0x276a <LCD_displayCharacter+0x45a>
    2790:	16 c0       	rjmp	.+44     	; 0x27be <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2792:	fe 01       	movw	r30, r28
    2794:	ff 96       	adiw	r30, 0x3f	; 63
    2796:	60 81       	ld	r22, Z
    2798:	71 81       	ldd	r23, Z+1	; 0x01
    279a:	82 81       	ldd	r24, Z+2	; 0x02
    279c:	93 81       	ldd	r25, Z+3	; 0x03
    279e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	9e af       	std	Y+62, r25	; 0x3e
    27a8:	8d af       	std	Y+61, r24	; 0x3d
    27aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    27ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    27ae:	9a af       	std	Y+58, r25	; 0x3a
    27b0:	89 af       	std	Y+57, r24	; 0x39
    27b2:	89 ad       	ldd	r24, Y+57	; 0x39
    27b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <LCD_displayCharacter+0x4a6>
    27ba:	9a af       	std	Y+58, r25	; 0x3a
    27bc:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	62 e0       	ldi	r22, 0x02	; 2
    27c2:	40 e0       	ldi	r20, 0x00	; 0
    27c4:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	a0 e8       	ldi	r26, 0x80	; 128
    27ce:	bf e3       	ldi	r27, 0x3F	; 63
    27d0:	8d ab       	std	Y+53, r24	; 0x35
    27d2:	9e ab       	std	Y+54, r25	; 0x36
    27d4:	af ab       	std	Y+55, r26	; 0x37
    27d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d8:	6d a9       	ldd	r22, Y+53	; 0x35
    27da:	7e a9       	ldd	r23, Y+54	; 0x36
    27dc:	8f a9       	ldd	r24, Y+55	; 0x37
    27de:	98 ad       	ldd	r25, Y+56	; 0x38
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	4a e7       	ldi	r20, 0x7A	; 122
    27e6:	55 e4       	ldi	r21, 0x45	; 69
    27e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	89 ab       	std	Y+49, r24	; 0x31
    27f2:	9a ab       	std	Y+50, r25	; 0x32
    27f4:	ab ab       	std	Y+51, r26	; 0x33
    27f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27f8:	69 a9       	ldd	r22, Y+49	; 0x31
    27fa:	7a a9       	ldd	r23, Y+50	; 0x32
    27fc:	8b a9       	ldd	r24, Y+51	; 0x33
    27fe:	9c a9       	ldd	r25, Y+52	; 0x34
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e8       	ldi	r20, 0x80	; 128
    2806:	5f e3       	ldi	r21, 0x3F	; 63
    2808:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    280c:	88 23       	and	r24, r24
    280e:	2c f4       	brge	.+10     	; 0x281a <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	98 ab       	std	Y+48, r25	; 0x30
    2816:	8f a7       	std	Y+47, r24	; 0x2f
    2818:	3f c0       	rjmp	.+126    	; 0x2898 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    281a:	69 a9       	ldd	r22, Y+49	; 0x31
    281c:	7a a9       	ldd	r23, Y+50	; 0x32
    281e:	8b a9       	ldd	r24, Y+51	; 0x33
    2820:	9c a9       	ldd	r25, Y+52	; 0x34
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	3f ef       	ldi	r19, 0xFF	; 255
    2826:	4f e7       	ldi	r20, 0x7F	; 127
    2828:	57 e4       	ldi	r21, 0x47	; 71
    282a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    282e:	18 16       	cp	r1, r24
    2830:	4c f5       	brge	.+82     	; 0x2884 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2832:	6d a9       	ldd	r22, Y+53	; 0x35
    2834:	7e a9       	ldd	r23, Y+54	; 0x36
    2836:	8f a9       	ldd	r24, Y+55	; 0x37
    2838:	98 ad       	ldd	r25, Y+56	; 0x38
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e2       	ldi	r20, 0x20	; 32
    2840:	51 e4       	ldi	r21, 0x41	; 65
    2842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	bc 01       	movw	r22, r24
    284c:	cd 01       	movw	r24, r26
    284e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	98 ab       	std	Y+48, r25	; 0x30
    2858:	8f a7       	std	Y+47, r24	; 0x2f
    285a:	0f c0       	rjmp	.+30     	; 0x287a <LCD_displayCharacter+0x56a>
    285c:	80 e9       	ldi	r24, 0x90	; 144
    285e:	91 e0       	ldi	r25, 0x01	; 1
    2860:	9e a7       	std	Y+46, r25	; 0x2e
    2862:	8d a7       	std	Y+45, r24	; 0x2d
    2864:	8d a5       	ldd	r24, Y+45	; 0x2d
    2866:	9e a5       	ldd	r25, Y+46	; 0x2e
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	f1 f7       	brne	.-4      	; 0x2868 <LCD_displayCharacter+0x558>
    286c:	9e a7       	std	Y+46, r25	; 0x2e
    286e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2870:	8f a5       	ldd	r24, Y+47	; 0x2f
    2872:	98 a9       	ldd	r25, Y+48	; 0x30
    2874:	01 97       	sbiw	r24, 0x01	; 1
    2876:	98 ab       	std	Y+48, r25	; 0x30
    2878:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287a:	8f a5       	ldd	r24, Y+47	; 0x2f
    287c:	98 a9       	ldd	r25, Y+48	; 0x30
    287e:	00 97       	sbiw	r24, 0x00	; 0
    2880:	69 f7       	brne	.-38     	; 0x285c <LCD_displayCharacter+0x54c>
    2882:	14 c0       	rjmp	.+40     	; 0x28ac <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2884:	69 a9       	ldd	r22, Y+49	; 0x31
    2886:	7a a9       	ldd	r23, Y+50	; 0x32
    2888:	8b a9       	ldd	r24, Y+51	; 0x33
    288a:	9c a9       	ldd	r25, Y+52	; 0x34
    288c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	98 ab       	std	Y+48, r25	; 0x30
    2896:	8f a7       	std	Y+47, r24	; 0x2f
    2898:	8f a5       	ldd	r24, Y+47	; 0x2f
    289a:	98 a9       	ldd	r25, Y+48	; 0x30
    289c:	9c a7       	std	Y+44, r25	; 0x2c
    289e:	8b a7       	std	Y+43, r24	; 0x2b
    28a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    28a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <LCD_displayCharacter+0x594>
    28a8:	9c a7       	std	Y+44, r25	; 0x2c
    28aa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	62 e0       	ldi	r22, 0x02	; 2
    28b0:	41 e0       	ldi	r20, 0x01	; 1
    28b2:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	a0 e8       	ldi	r26, 0x80	; 128
    28bc:	bf e3       	ldi	r27, 0x3F	; 63
    28be:	8f a3       	std	Y+39, r24	; 0x27
    28c0:	98 a7       	std	Y+40, r25	; 0x28
    28c2:	a9 a7       	std	Y+41, r26	; 0x29
    28c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c6:	6f a1       	ldd	r22, Y+39	; 0x27
    28c8:	78 a5       	ldd	r23, Y+40	; 0x28
    28ca:	89 a5       	ldd	r24, Y+41	; 0x29
    28cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	4a e7       	ldi	r20, 0x7A	; 122
    28d4:	55 e4       	ldi	r21, 0x45	; 69
    28d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	8b a3       	std	Y+35, r24	; 0x23
    28e0:	9c a3       	std	Y+36, r25	; 0x24
    28e2:	ad a3       	std	Y+37, r26	; 0x25
    28e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28e6:	6b a1       	ldd	r22, Y+35	; 0x23
    28e8:	7c a1       	ldd	r23, Y+36	; 0x24
    28ea:	8d a1       	ldd	r24, Y+37	; 0x25
    28ec:	9e a1       	ldd	r25, Y+38	; 0x26
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	40 e8       	ldi	r20, 0x80	; 128
    28f4:	5f e3       	ldi	r21, 0x3F	; 63
    28f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28fa:	88 23       	and	r24, r24
    28fc:	2c f4       	brge	.+10     	; 0x2908 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	9a a3       	std	Y+34, r25	; 0x22
    2904:	89 a3       	std	Y+33, r24	; 0x21
    2906:	3f c0       	rjmp	.+126    	; 0x2986 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2908:	6b a1       	ldd	r22, Y+35	; 0x23
    290a:	7c a1       	ldd	r23, Y+36	; 0x24
    290c:	8d a1       	ldd	r24, Y+37	; 0x25
    290e:	9e a1       	ldd	r25, Y+38	; 0x26
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	3f ef       	ldi	r19, 0xFF	; 255
    2914:	4f e7       	ldi	r20, 0x7F	; 127
    2916:	57 e4       	ldi	r21, 0x47	; 71
    2918:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    291c:	18 16       	cp	r1, r24
    291e:	4c f5       	brge	.+82     	; 0x2972 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2920:	6f a1       	ldd	r22, Y+39	; 0x27
    2922:	78 a5       	ldd	r23, Y+40	; 0x28
    2924:	89 a5       	ldd	r24, Y+41	; 0x29
    2926:	9a a5       	ldd	r25, Y+42	; 0x2a
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	40 e2       	ldi	r20, 0x20	; 32
    292e:	51 e4       	ldi	r21, 0x41	; 65
    2930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	bc 01       	movw	r22, r24
    293a:	cd 01       	movw	r24, r26
    293c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	9a a3       	std	Y+34, r25	; 0x22
    2946:	89 a3       	std	Y+33, r24	; 0x21
    2948:	0f c0       	rjmp	.+30     	; 0x2968 <LCD_displayCharacter+0x658>
    294a:	80 e9       	ldi	r24, 0x90	; 144
    294c:	91 e0       	ldi	r25, 0x01	; 1
    294e:	98 a3       	std	Y+32, r25	; 0x20
    2950:	8f 8f       	std	Y+31, r24	; 0x1f
    2952:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2954:	98 a1       	ldd	r25, Y+32	; 0x20
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	f1 f7       	brne	.-4      	; 0x2956 <LCD_displayCharacter+0x646>
    295a:	98 a3       	std	Y+32, r25	; 0x20
    295c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295e:	89 a1       	ldd	r24, Y+33	; 0x21
    2960:	9a a1       	ldd	r25, Y+34	; 0x22
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	9a a3       	std	Y+34, r25	; 0x22
    2966:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2968:	89 a1       	ldd	r24, Y+33	; 0x21
    296a:	9a a1       	ldd	r25, Y+34	; 0x22
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	69 f7       	brne	.-38     	; 0x294a <LCD_displayCharacter+0x63a>
    2970:	14 c0       	rjmp	.+40     	; 0x299a <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2972:	6b a1       	ldd	r22, Y+35	; 0x23
    2974:	7c a1       	ldd	r23, Y+36	; 0x24
    2976:	8d a1       	ldd	r24, Y+37	; 0x25
    2978:	9e a1       	ldd	r25, Y+38	; 0x26
    297a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	9a a3       	std	Y+34, r25	; 0x22
    2984:	89 a3       	std	Y+33, r24	; 0x21
    2986:	89 a1       	ldd	r24, Y+33	; 0x21
    2988:	9a a1       	ldd	r25, Y+34	; 0x22
    298a:	9e 8f       	std	Y+30, r25	; 0x1e
    298c:	8d 8f       	std	Y+29, r24	; 0x1d
    298e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2990:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	f1 f7       	brne	.-4      	; 0x2992 <LCD_displayCharacter+0x682>
    2996:	9e 8f       	std	Y+30, r25	; 0x1e
    2998:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(a_data, 0));
    299a:	fe 01       	movw	r30, r28
    299c:	ed 59       	subi	r30, 0x9D	; 157
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	80 81       	ld	r24, Z
    29a2:	98 2f       	mov	r25, r24
    29a4:	91 70       	andi	r25, 0x01	; 1
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	63 e0       	ldi	r22, 0x03	; 3
    29aa:	49 2f       	mov	r20, r25
    29ac:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(a_data, 1));
    29b0:	fe 01       	movw	r30, r28
    29b2:	ed 59       	subi	r30, 0x9D	; 157
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	80 81       	ld	r24, Z
    29b8:	88 2f       	mov	r24, r24
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	82 70       	andi	r24, 0x02	; 2
    29be:	90 70       	andi	r25, 0x00	; 0
    29c0:	95 95       	asr	r25
    29c2:	87 95       	ror	r24
    29c4:	98 2f       	mov	r25, r24
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	64 e0       	ldi	r22, 0x04	; 4
    29ca:	49 2f       	mov	r20, r25
    29cc:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(a_data, 2));
    29d0:	fe 01       	movw	r30, r28
    29d2:	ed 59       	subi	r30, 0x9D	; 157
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	80 81       	ld	r24, Z
    29d8:	88 2f       	mov	r24, r24
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	84 70       	andi	r24, 0x04	; 4
    29de:	90 70       	andi	r25, 0x00	; 0
    29e0:	95 95       	asr	r25
    29e2:	87 95       	ror	r24
    29e4:	95 95       	asr	r25
    29e6:	87 95       	ror	r24
    29e8:	98 2f       	mov	r25, r24
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	65 e0       	ldi	r22, 0x05	; 5
    29ee:	49 2f       	mov	r20, r25
    29f0:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(a_data, 3));
    29f4:	fe 01       	movw	r30, r28
    29f6:	ed 59       	subi	r30, 0x9D	; 157
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	80 81       	ld	r24, Z
    29fc:	88 2f       	mov	r24, r24
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	88 70       	andi	r24, 0x08	; 8
    2a02:	90 70       	andi	r25, 0x00	; 0
    2a04:	95 95       	asr	r25
    2a06:	87 95       	ror	r24
    2a08:	95 95       	asr	r25
    2a0a:	87 95       	ror	r24
    2a0c:	95 95       	asr	r25
    2a0e:	87 95       	ror	r24
    2a10:	98 2f       	mov	r25, r24
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	66 e0       	ldi	r22, 0x06	; 6
    2a16:	49 2f       	mov	r20, r25
    2a18:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	a0 e8       	ldi	r26, 0x80	; 128
    2a22:	bf e3       	ldi	r27, 0x3F	; 63
    2a24:	89 8f       	std	Y+25, r24	; 0x19
    2a26:	9a 8f       	std	Y+26, r25	; 0x1a
    2a28:	ab 8f       	std	Y+27, r26	; 0x1b
    2a2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a2c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	4a e7       	ldi	r20, 0x7A	; 122
    2a3a:	55 e4       	ldi	r21, 0x45	; 69
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	8d 8b       	std	Y+21, r24	; 0x15
    2a46:	9e 8b       	std	Y+22, r25	; 0x16
    2a48:	af 8b       	std	Y+23, r26	; 0x17
    2a4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a50:	8f 89       	ldd	r24, Y+23	; 0x17
    2a52:	98 8d       	ldd	r25, Y+24	; 0x18
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e8       	ldi	r20, 0x80	; 128
    2a5a:	5f e3       	ldi	r21, 0x3F	; 63
    2a5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a60:	88 23       	and	r24, r24
    2a62:	2c f4       	brge	.+10     	; 0x2a6e <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	9c 8b       	std	Y+20, r25	; 0x14
    2a6a:	8b 8b       	std	Y+19, r24	; 0x13
    2a6c:	3f c0       	rjmp	.+126    	; 0x2aec <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2a6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a70:	7e 89       	ldd	r23, Y+22	; 0x16
    2a72:	8f 89       	ldd	r24, Y+23	; 0x17
    2a74:	98 8d       	ldd	r25, Y+24	; 0x18
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	3f ef       	ldi	r19, 0xFF	; 255
    2a7a:	4f e7       	ldi	r20, 0x7F	; 127
    2a7c:	57 e4       	ldi	r21, 0x47	; 71
    2a7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a82:	18 16       	cp	r1, r24
    2a84:	4c f5       	brge	.+82     	; 0x2ad8 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a86:	69 8d       	ldd	r22, Y+25	; 0x19
    2a88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e2       	ldi	r20, 0x20	; 32
    2a94:	51 e4       	ldi	r21, 0x41	; 65
    2a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	bc 01       	movw	r22, r24
    2aa0:	cd 01       	movw	r24, r26
    2aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	9c 8b       	std	Y+20, r25	; 0x14
    2aac:	8b 8b       	std	Y+19, r24	; 0x13
    2aae:	0f c0       	rjmp	.+30     	; 0x2ace <LCD_displayCharacter+0x7be>
    2ab0:	80 e9       	ldi	r24, 0x90	; 144
    2ab2:	91 e0       	ldi	r25, 0x01	; 1
    2ab4:	9a 8b       	std	Y+18, r25	; 0x12
    2ab6:	89 8b       	std	Y+17, r24	; 0x11
    2ab8:	89 89       	ldd	r24, Y+17	; 0x11
    2aba:	9a 89       	ldd	r25, Y+18	; 0x12
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <LCD_displayCharacter+0x7ac>
    2ac0:	9a 8b       	std	Y+18, r25	; 0x12
    2ac2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	9c 8b       	std	Y+20, r25	; 0x14
    2acc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ace:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	69 f7       	brne	.-38     	; 0x2ab0 <LCD_displayCharacter+0x7a0>
    2ad6:	14 c0       	rjmp	.+40     	; 0x2b00 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    2ada:	7e 89       	ldd	r23, Y+22	; 0x16
    2adc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ade:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	9c 8b       	std	Y+20, r25	; 0x14
    2aea:	8b 8b       	std	Y+19, r24	; 0x13
    2aec:	8b 89       	ldd	r24, Y+19	; 0x13
    2aee:	9c 89       	ldd	r25, Y+20	; 0x14
    2af0:	98 8b       	std	Y+16, r25	; 0x10
    2af2:	8f 87       	std	Y+15, r24	; 0x0f
    2af4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2af6:	98 89       	ldd	r25, Y+16	; 0x10
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	f1 f7       	brne	.-4      	; 0x2af8 <LCD_displayCharacter+0x7e8>
    2afc:	98 8b       	std	Y+16, r25	; 0x10
    2afe:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	62 e0       	ldi	r22, 0x02	; 2
    2b04:	40 e0       	ldi	r20, 0x00	; 0
    2b06:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	a0 e8       	ldi	r26, 0x80	; 128
    2b10:	bf e3       	ldi	r27, 0x3F	; 63
    2b12:	8b 87       	std	Y+11, r24	; 0x0b
    2b14:	9c 87       	std	Y+12, r25	; 0x0c
    2b16:	ad 87       	std	Y+13, r26	; 0x0d
    2b18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	4a e7       	ldi	r20, 0x7A	; 122
    2b28:	55 e4       	ldi	r21, 0x45	; 69
    2b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	8f 83       	std	Y+7, r24	; 0x07
    2b34:	98 87       	std	Y+8, r25	; 0x08
    2b36:	a9 87       	std	Y+9, r26	; 0x09
    2b38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b3c:	78 85       	ldd	r23, Y+8	; 0x08
    2b3e:	89 85       	ldd	r24, Y+9	; 0x09
    2b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	40 e8       	ldi	r20, 0x80	; 128
    2b48:	5f e3       	ldi	r21, 0x3F	; 63
    2b4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b4e:	88 23       	and	r24, r24
    2b50:	2c f4       	brge	.+10     	; 0x2b5c <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	9e 83       	std	Y+6, r25	; 0x06
    2b58:	8d 83       	std	Y+5, r24	; 0x05
    2b5a:	3f c0       	rjmp	.+126    	; 0x2bda <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5e:	78 85       	ldd	r23, Y+8	; 0x08
    2b60:	89 85       	ldd	r24, Y+9	; 0x09
    2b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	3f ef       	ldi	r19, 0xFF	; 255
    2b68:	4f e7       	ldi	r20, 0x7F	; 127
    2b6a:	57 e4       	ldi	r21, 0x47	; 71
    2b6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b70:	18 16       	cp	r1, r24
    2b72:	4c f5       	brge	.+82     	; 0x2bc6 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e2       	ldi	r20, 0x20	; 32
    2b82:	51 e4       	ldi	r21, 0x41	; 65
    2b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	bc 01       	movw	r22, r24
    2b8e:	cd 01       	movw	r24, r26
    2b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	9e 83       	std	Y+6, r25	; 0x06
    2b9a:	8d 83       	std	Y+5, r24	; 0x05
    2b9c:	0f c0       	rjmp	.+30     	; 0x2bbc <LCD_displayCharacter+0x8ac>
    2b9e:	80 e9       	ldi	r24, 0x90	; 144
    2ba0:	91 e0       	ldi	r25, 0x01	; 1
    2ba2:	9c 83       	std	Y+4, r25	; 0x04
    2ba4:	8b 83       	std	Y+3, r24	; 0x03
    2ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	f1 f7       	brne	.-4      	; 0x2baa <LCD_displayCharacter+0x89a>
    2bae:	9c 83       	std	Y+4, r25	; 0x04
    2bb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	9e 83       	std	Y+6, r25	; 0x06
    2bba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc0:	00 97       	sbiw	r24, 0x00	; 0
    2bc2:	69 f7       	brne	.-38     	; 0x2b9e <LCD_displayCharacter+0x88e>
    2bc4:	14 c0       	rjmp	.+40     	; 0x2bee <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc8:	78 85       	ldd	r23, Y+8	; 0x08
    2bca:	89 85       	ldd	r24, Y+9	; 0x09
    2bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	9e 83       	std	Y+6, r25	; 0x06
    2bd8:	8d 83       	std	Y+5, r24	; 0x05
    2bda:	8d 81       	ldd	r24, Y+5	; 0x05
    2bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bde:	9a 83       	std	Y+2, r25	; 0x02
    2be0:	89 83       	std	Y+1, r24	; 0x01
    2be2:	89 81       	ldd	r24, Y+1	; 0x01
    2be4:	9a 81       	ldd	r25, Y+2	; 0x02
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	f1 f7       	brne	.-4      	; 0x2be6 <LCD_displayCharacter+0x8d6>
    2bea:	9a 83       	std	Y+2, r25	; 0x02
    2bec:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID, a_data);			   /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1);										   /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1);										   /* delay for processing Th = 13ns */
#endif
}
    2bee:	cd 59       	subi	r28, 0x9D	; 157
    2bf0:	df 4f       	sbci	r29, 0xFF	; 255
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
    2bfc:	cf 91       	pop	r28
    2bfe:	df 91       	pop	r29
    2c00:	1f 91       	pop	r17
    2c02:	0f 91       	pop	r16
    2c04:	08 95       	ret

00002c06 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *a_str)
{
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <LCD_displayString+0x6>
    2c0c:	0f 92       	push	r0
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	9b 83       	std	Y+3, r25	; 0x03
    2c14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c16:	19 82       	std	Y+1, r1	; 0x01
    2c18:	0e c0       	rjmp	.+28     	; 0x2c36 <LCD_displayString+0x30>
	while (a_str[i] != '\0')
	{
		LCD_displayCharacter(a_str[i]);
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	28 2f       	mov	r18, r24
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	8a 81       	ldd	r24, Y+2	; 0x02
    2c22:	9b 81       	ldd	r25, Y+3	; 0x03
    2c24:	fc 01       	movw	r30, r24
    2c26:	e2 0f       	add	r30, r18
    2c28:	f3 1f       	adc	r31, r19
    2c2a:	80 81       	ld	r24, Z
    2c2c:	0e 94 88 11 	call	0x2310	; 0x2310 <LCD_displayCharacter>
		i++;
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	8f 5f       	subi	r24, 0xFF	; 255
    2c34:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *a_str)
{
	uint8 i = 0;
	while (a_str[i] != '\0')
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	28 2f       	mov	r18, r24
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c40:	fc 01       	movw	r30, r24
    2c42:	e2 0f       	add	r30, r18
    2c44:	f3 1f       	adc	r31, r19
    2c46:	80 81       	ld	r24, Z
    2c48:	88 23       	and	r24, r24
    2c4a:	39 f7       	brne	.-50     	; 0x2c1a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(a_str[i]);
		i++;
	}
}
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	cf 91       	pop	r28
    2c54:	df 91       	pop	r29
    2c56:	08 95       	ret

00002c58 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 a_row, uint8 a_col)
{
    2c58:	df 93       	push	r29
    2c5a:	cf 93       	push	r28
    2c5c:	00 d0       	rcall	.+0      	; 0x2c5e <LCD_moveCursor+0x6>
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <LCD_moveCursor+0x8>
    2c60:	0f 92       	push	r0
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	8a 83       	std	Y+2, r24	; 0x02
    2c68:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch (a_row)
    2c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6c:	28 2f       	mov	r18, r24
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	3d 83       	std	Y+5, r19	; 0x05
    2c72:	2c 83       	std	Y+4, r18	; 0x04
    2c74:	8c 81       	ldd	r24, Y+4	; 0x04
    2c76:	9d 81       	ldd	r25, Y+5	; 0x05
    2c78:	81 30       	cpi	r24, 0x01	; 1
    2c7a:	91 05       	cpc	r25, r1
    2c7c:	c1 f0       	breq	.+48     	; 0x2cae <LCD_moveCursor+0x56>
    2c7e:	2c 81       	ldd	r18, Y+4	; 0x04
    2c80:	3d 81       	ldd	r19, Y+5	; 0x05
    2c82:	22 30       	cpi	r18, 0x02	; 2
    2c84:	31 05       	cpc	r19, r1
    2c86:	2c f4       	brge	.+10     	; 0x2c92 <LCD_moveCursor+0x3a>
    2c88:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	61 f0       	breq	.+24     	; 0x2ca8 <LCD_moveCursor+0x50>
    2c90:	19 c0       	rjmp	.+50     	; 0x2cc4 <LCD_moveCursor+0x6c>
    2c92:	2c 81       	ldd	r18, Y+4	; 0x04
    2c94:	3d 81       	ldd	r19, Y+5	; 0x05
    2c96:	22 30       	cpi	r18, 0x02	; 2
    2c98:	31 05       	cpc	r19, r1
    2c9a:	69 f0       	breq	.+26     	; 0x2cb6 <LCD_moveCursor+0x5e>
    2c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca0:	83 30       	cpi	r24, 0x03	; 3
    2ca2:	91 05       	cpc	r25, r1
    2ca4:	61 f0       	breq	.+24     	; 0x2cbe <LCD_moveCursor+0x66>
    2ca6:	0e c0       	rjmp	.+28     	; 0x2cc4 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = a_col;
    2ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    2caa:	89 83       	std	Y+1, r24	; 0x01
    2cac:	0b c0       	rjmp	.+22     	; 0x2cc4 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = a_col + 0x40;
    2cae:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb0:	80 5c       	subi	r24, 0xC0	; 192
    2cb2:	89 83       	std	Y+1, r24	; 0x01
    2cb4:	07 c0       	rjmp	.+14     	; 0x2cc4 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = a_col + 0x10;
    2cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb8:	80 5f       	subi	r24, 0xF0	; 240
    2cba:	89 83       	std	Y+1, r24	; 0x01
    2cbc:	03 c0       	rjmp	.+6      	; 0x2cc4 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = a_col + 0x50;
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	80 5b       	subi	r24, 0xB0	; 176
    2cc2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	80 68       	ori	r24, 0x80	; 128
    2cc8:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <LCD_sendCommand>
}
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	cf 91       	pop	r28
    2cd8:	df 91       	pop	r29
    2cda:	08 95       	ret

00002cdc <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 a_row, uint8 col, const char *a_str)
{
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	00 d0       	rcall	.+0      	; 0x2ce2 <LCD_displayStringRowColumn+0x6>
    2ce2:	00 d0       	rcall	.+0      	; 0x2ce4 <LCD_displayStringRowColumn+0x8>
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	89 83       	std	Y+1, r24	; 0x01
    2cea:	6a 83       	std	Y+2, r22	; 0x02
    2cec:	5c 83       	std	Y+4, r21	; 0x04
    2cee:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(a_row, col); /* go to to the required LCD position */
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	6a 81       	ldd	r22, Y+2	; 0x02
    2cf4:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <LCD_moveCursor>
	LCD_displayString(a_str); /* display the string */
    2cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    2cfc:	0e 94 03 16 	call	0x2c06	; 0x2c06 <LCD_displayString>
}
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	cf 91       	pop	r28
    2d0a:	df 91       	pop	r29
    2d0c:	08 95       	ret

00002d0e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int a_data)
{
    2d0e:	df 93       	push	r29
    2d10:	cf 93       	push	r28
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
    2d16:	62 97       	sbiw	r28, 0x12	; 18
    2d18:	0f b6       	in	r0, 0x3f	; 63
    2d1a:	f8 94       	cli
    2d1c:	de bf       	out	0x3e, r29	; 62
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	cd bf       	out	0x3d, r28	; 61
    2d22:	9a 8b       	std	Y+18, r25	; 0x12
    2d24:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(a_data, buff, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2d26:	89 89       	ldd	r24, Y+17	; 0x11
    2d28:	9a 89       	ldd	r25, Y+18	; 0x12
    2d2a:	9e 01       	movw	r18, r28
    2d2c:	2f 5f       	subi	r18, 0xFF	; 255
    2d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d30:	b9 01       	movw	r22, r18
    2d32:	4a e0       	ldi	r20, 0x0A	; 10
    2d34:	50 e0       	ldi	r21, 0x00	; 0
    2d36:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <itoa>
	LCD_displayString(buff); /* Display the string */
    2d3a:	ce 01       	movw	r24, r28
    2d3c:	01 96       	adiw	r24, 0x01	; 1
    2d3e:	0e 94 03 16 	call	0x2c06	; 0x2c06 <LCD_displayString>
}
    2d42:	62 96       	adiw	r28, 0x12	; 18
    2d44:	0f b6       	in	r0, 0x3f	; 63
    2d46:	f8 94       	cli
    2d48:	de bf       	out	0x3e, r29	; 62
    2d4a:	0f be       	out	0x3f, r0	; 63
    2d4c:	cd bf       	out	0x3d, r28	; 61
    2d4e:	cf 91       	pop	r28
    2d50:	df 91       	pop	r29
    2d52:	08 95       	ret

00002d54 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <LCD_sendCommand>
}
    2d62:	cf 91       	pop	r28
    2d64:	df 91       	pop	r29
    2d66:	08 95       	ret

00002d68 <LAMP_init>:

#include "../../MCAL/GPIO/gpio.h"
#include "lamp.h"

void LAMP_init(void)
{
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LED_PORT, LED_PIN, PIN_OUTPUT);
    2d70:	83 e0       	ldi	r24, 0x03	; 3
    2d72:	61 e0       	ldi	r22, 0x01	; 1
    2d74:	41 e0       	ldi	r20, 0x01	; 1
    2d76:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>

	GPIO_writePin(LED_PORT, LED_PIN, LOGIC_LOW);
    2d7a:	83 e0       	ldi	r24, 0x03	; 3
    2d7c:	61 e0       	ldi	r22, 0x01	; 1
    2d7e:	40 e0       	ldi	r20, 0x00	; 0
    2d80:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
}
    2d84:	cf 91       	pop	r28
    2d86:	df 91       	pop	r29
    2d88:	08 95       	ret

00002d8a <LAMP_ON>:

void LAMP_ON(void)
{
    2d8a:	df 93       	push	r29
    2d8c:	cf 93       	push	r28
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(LED_PORT, LED_PIN, LOGIC_HIGH);
    2d92:	83 e0       	ldi	r24, 0x03	; 3
    2d94:	61 e0       	ldi	r22, 0x01	; 1
    2d96:	41 e0       	ldi	r20, 0x01	; 1
    2d98:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>

}
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	08 95       	ret

00002da2 <LAMP_OFF>:

void LAMP_OFF(void)
{
    2da2:	df 93       	push	r29
    2da4:	cf 93       	push	r28
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(LED_PORT, LED_PIN, LOGIC_LOW);
    2daa:	83 e0       	ldi	r24, 0x03	; 3
    2dac:	61 e0       	ldi	r22, 0x01	; 1
    2dae:	40 e0       	ldi	r20, 0x00	; 0
    2db0:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>

}
    2db4:	cf 91       	pop	r28
    2db6:	df 91       	pop	r29
    2db8:	08 95       	ret

00002dba <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2dba:	df 93       	push	r29
    2dbc:	cf 93       	push	r28
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
    2dc2:	60 97       	sbiw	r28, 0x10	; 16
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	de bf       	out	0x3e, r29	; 62
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	cd bf       	out	0x3d, r28	; 61
	uint8 col, row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID,
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	64 e0       	ldi	r22, 0x04	; 4
    2dd2:	40 e0       	ldi	r20, 0x00	; 0
    2dd4:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 1,
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	65 e0       	ldi	r22, 0x05	; 5
    2ddc:	40 e0       	ldi	r20, 0x00	; 0
    2dde:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 2,
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	66 e0       	ldi	r22, 0x06	; 6
    2de6:	40 e0       	ldi	r20, 0x00	; 0
    2de8:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 3,
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	67 e0       	ldi	r22, 0x07	; 7
    2df0:	40 e0       	ldi	r20, 0x00	; 0
    2df2:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>
			PIN_INPUT);

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID,
    2df6:	83 e0       	ldi	r24, 0x03	; 3
    2df8:	64 e0       	ldi	r22, 0x04	; 4
    2dfa:	40 e0       	ldi	r20, 0x00	; 0
    2dfc:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 1,
    2e00:	83 e0       	ldi	r24, 0x03	; 3
    2e02:	65 e0       	ldi	r22, 0x05	; 5
    2e04:	40 e0       	ldi	r20, 0x00	; 0
    2e06:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 2,
    2e0a:	83 e0       	ldi	r24, 0x03	; 3
    2e0c:	66 e0       	ldi	r22, 0x06	; 6
    2e0e:	40 e0       	ldi	r20, 0x00	; 0
    2e10:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>
			PIN_INPUT);
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3,
    2e14:	83 e0       	ldi	r24, 0x03	; 3
    2e16:	67 e0       	ldi	r22, 0x07	; 7
    2e18:	40 e0       	ldi	r20, 0x00	; 0
    2e1a:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>
			PIN_INPUT);
#endif
	while (1)
	{
		for (row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    2e1e:	1f 86       	std	Y+15, r1	; 0x0f
    2e20:	b4 c0       	rjmp	.+360    	; 0x2f8a <KEYPAD_getPressedKey+0x1d0>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    2e22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e24:	98 2f       	mov	r25, r24
    2e26:	9c 5f       	subi	r25, 0xFC	; 252
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	69 2f       	mov	r22, r25
    2e2c:	41 e0       	ldi	r20, 0x01	; 1
    2e2e:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
    2e32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e34:	98 2f       	mov	r25, r24
    2e36:	9c 5f       	subi	r25, 0xFC	; 252
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	69 2f       	mov	r22, r25
    2e3c:	40 e0       	ldi	r20, 0x00	; 0
    2e3e:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_writePin>
			KEYPAD_BUTTON_PRESSED);

			for (col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    2e42:	18 8a       	std	Y+16, r1	; 0x10
    2e44:	22 c0       	rjmp	.+68     	; 0x2e8a <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if (GPIO_readPin(KEYPAD_COL_PORT_ID,
    2e46:	88 89       	ldd	r24, Y+16	; 0x10
    2e48:	98 2f       	mov	r25, r24
    2e4a:	9c 5f       	subi	r25, 0xFC	; 252
    2e4c:	83 e0       	ldi	r24, 0x03	; 3
    2e4e:	69 2f       	mov	r22, r25
    2e50:	0e 94 c3 08 	call	0x1186	; 0x1186 <GPIO_readPin>
    2e54:	88 23       	and	r24, r24
    2e56:	b1 f4       	brne	.+44     	; 0x2e84 <KEYPAD_getPressedKey+0xca>
#endif
#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
					return ((row * KEYPAD_NUM_COLS) + col + 1);
#else
					return KEYPAD_4x4_adjustKeyNumber(
    2e58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e5a:	88 2f       	mov	r24, r24
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	88 0f       	add	r24, r24
    2e64:	99 1f       	adc	r25, r25
    2e66:	98 2f       	mov	r25, r24
    2e68:	88 89       	ldd	r24, Y+16	; 0x10
    2e6a:	89 0f       	add	r24, r25
    2e6c:	8f 5f       	subi	r24, 0xFF	; 255
    2e6e:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <KEYPAD_4x4_adjustKeyNumber>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    2e72:	60 96       	adiw	r28, 0x10	; 16
    2e74:	0f b6       	in	r0, 0x3f	; 63
    2e76:	f8 94       	cli
    2e78:	de bf       	out	0x3e, r29	; 62
    2e7a:	0f be       	out	0x3f, r0	; 63
    2e7c:	cd bf       	out	0x3d, r28	; 61
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	08 95       	ret

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
			KEYPAD_BUTTON_PRESSED);

			for (col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    2e84:	88 89       	ldd	r24, Y+16	; 0x10
    2e86:	8f 5f       	subi	r24, 0xFF	; 255
    2e88:	88 8b       	std	Y+16, r24	; 0x10
    2e8a:	88 89       	ldd	r24, Y+16	; 0x10
    2e8c:	84 30       	cpi	r24, 0x04	; 4
    2e8e:	d8 f2       	brcs	.-74     	; 0x2e46 <KEYPAD_getPressedKey+0x8c>
							(row * KEYPAD_NUM_COLS) + col + 1);
#endif
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    2e90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e92:	98 2f       	mov	r25, r24
    2e94:	9c 5f       	subi	r25, 0xFC	; 252
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	69 2f       	mov	r22, r25
    2e9a:	40 e0       	ldi	r20, 0x00	; 0
    2e9c:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_setupPinDirection>
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	a0 ea       	ldi	r26, 0xA0	; 160
    2ea6:	b0 e4       	ldi	r27, 0x40	; 64
    2ea8:	8b 87       	std	Y+11, r24	; 0x0b
    2eaa:	9c 87       	std	Y+12, r25	; 0x0c
    2eac:	ad 87       	std	Y+13, r26	; 0x0d
    2eae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	4a e7       	ldi	r20, 0x7A	; 122
    2ebe:	55 e4       	ldi	r21, 0x45	; 69
    2ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	8f 83       	std	Y+7, r24	; 0x07
    2eca:	98 87       	std	Y+8, r25	; 0x08
    2ecc:	a9 87       	std	Y+9, r26	; 0x09
    2ece:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed2:	78 85       	ldd	r23, Y+8	; 0x08
    2ed4:	89 85       	ldd	r24, Y+9	; 0x09
    2ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e8       	ldi	r20, 0x80	; 128
    2ede:	5f e3       	ldi	r21, 0x3F	; 63
    2ee0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ee4:	88 23       	and	r24, r24
    2ee6:	2c f4       	brge	.+10     	; 0x2ef2 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	9e 83       	std	Y+6, r25	; 0x06
    2eee:	8d 83       	std	Y+5, r24	; 0x05
    2ef0:	3f c0       	rjmp	.+126    	; 0x2f70 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    2ef2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef4:	78 85       	ldd	r23, Y+8	; 0x08
    2ef6:	89 85       	ldd	r24, Y+9	; 0x09
    2ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	3f ef       	ldi	r19, 0xFF	; 255
    2efe:	4f e7       	ldi	r20, 0x7F	; 127
    2f00:	57 e4       	ldi	r21, 0x47	; 71
    2f02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f06:	18 16       	cp	r1, r24
    2f08:	4c f5       	brge	.+82     	; 0x2f5c <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	40 e2       	ldi	r20, 0x20	; 32
    2f18:	51 e4       	ldi	r21, 0x41	; 65
    2f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	bc 01       	movw	r22, r24
    2f24:	cd 01       	movw	r24, r26
    2f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	9e 83       	std	Y+6, r25	; 0x06
    2f30:	8d 83       	std	Y+5, r24	; 0x05
    2f32:	0f c0       	rjmp	.+30     	; 0x2f52 <KEYPAD_getPressedKey+0x198>
    2f34:	80 e9       	ldi	r24, 0x90	; 144
    2f36:	91 e0       	ldi	r25, 0x01	; 1
    2f38:	9c 83       	std	Y+4, r25	; 0x04
    2f3a:	8b 83       	std	Y+3, r24	; 0x03
    2f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	f1 f7       	brne	.-4      	; 0x2f40 <KEYPAD_getPressedKey+0x186>
    2f44:	9c 83       	std	Y+4, r25	; 0x04
    2f46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f48:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	9e 83       	std	Y+6, r25	; 0x06
    2f50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f52:	8d 81       	ldd	r24, Y+5	; 0x05
    2f54:	9e 81       	ldd	r25, Y+6	; 0x06
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	69 f7       	brne	.-38     	; 0x2f34 <KEYPAD_getPressedKey+0x17a>
    2f5a:	14 c0       	rjmp	.+40     	; 0x2f84 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5e:	78 85       	ldd	r23, Y+8	; 0x08
    2f60:	89 85       	ldd	r24, Y+9	; 0x09
    2f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	9e 83       	std	Y+6, r25	; 0x06
    2f6e:	8d 83       	std	Y+5, r24	; 0x05
    2f70:	8d 81       	ldd	r24, Y+5	; 0x05
    2f72:	9e 81       	ldd	r25, Y+6	; 0x06
    2f74:	9a 83       	std	Y+2, r25	; 0x02
    2f76:	89 83       	std	Y+1, r24	; 0x01
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	f1 f7       	brne	.-4      	; 0x2f7c <KEYPAD_getPressedKey+0x1c2>
    2f80:	9a 83       	std	Y+2, r25	; 0x02
    2f82:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3,
			PIN_INPUT);
#endif
	while (1)
	{
		for (row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    2f84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f86:	8f 5f       	subi	r24, 0xFF	; 255
    2f88:	8f 87       	std	Y+15, r24	; 0x0f
    2f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f8c:	84 30       	cpi	r24, 0x04	; 4
    2f8e:	08 f4       	brcc	.+2      	; 0x2f92 <KEYPAD_getPressedKey+0x1d8>
    2f90:	48 cf       	rjmp	.-368    	; 0x2e22 <KEYPAD_getPressedKey+0x68>
    2f92:	45 cf       	rjmp	.-374    	; 0x2e1e <KEYPAD_getPressedKey+0x64>

00002f94 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2f94:	df 93       	push	r29
    2f96:	cf 93       	push	r28
    2f98:	00 d0       	rcall	.+0      	; 0x2f9a <KEYPAD_4x4_adjustKeyNumber+0x6>
    2f9a:	00 d0       	rcall	.+0      	; 0x2f9c <KEYPAD_4x4_adjustKeyNumber+0x8>
    2f9c:	cd b7       	in	r28, 0x3d	; 61
    2f9e:	de b7       	in	r29, 0x3e	; 62
    2fa0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2fa2:	19 82       	std	Y+1, r1	; 0x01
	switch (button_number)
    2fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa6:	28 2f       	mov	r18, r24
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	3c 83       	std	Y+4, r19	; 0x04
    2fac:	2b 83       	std	Y+3, r18	; 0x03
    2fae:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb2:	88 30       	cpi	r24, 0x08	; 8
    2fb4:	91 05       	cpc	r25, r1
    2fb6:	09 f4       	brne	.+2      	; 0x2fba <KEYPAD_4x4_adjustKeyNumber+0x26>
    2fb8:	70 c0       	rjmp	.+224    	; 0x309a <KEYPAD_4x4_adjustKeyNumber+0x106>
    2fba:	2b 81       	ldd	r18, Y+3	; 0x03
    2fbc:	3c 81       	ldd	r19, Y+4	; 0x04
    2fbe:	29 30       	cpi	r18, 0x09	; 9
    2fc0:	31 05       	cpc	r19, r1
    2fc2:	5c f5       	brge	.+86     	; 0x301a <KEYPAD_4x4_adjustKeyNumber+0x86>
    2fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc8:	84 30       	cpi	r24, 0x04	; 4
    2fca:	91 05       	cpc	r25, r1
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2fce:	59 c0       	rjmp	.+178    	; 0x3082 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2fd0:	2b 81       	ldd	r18, Y+3	; 0x03
    2fd2:	3c 81       	ldd	r19, Y+4	; 0x04
    2fd4:	25 30       	cpi	r18, 0x05	; 5
    2fd6:	31 05       	cpc	r19, r1
    2fd8:	9c f4       	brge	.+38     	; 0x3000 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2fda:	8b 81       	ldd	r24, Y+3	; 0x03
    2fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2fde:	82 30       	cpi	r24, 0x02	; 2
    2fe0:	91 05       	cpc	r25, r1
    2fe2:	09 f4       	brne	.+2      	; 0x2fe6 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2fe4:	48 c0       	rjmp	.+144    	; 0x3076 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2fe6:	2b 81       	ldd	r18, Y+3	; 0x03
    2fe8:	3c 81       	ldd	r19, Y+4	; 0x04
    2fea:	23 30       	cpi	r18, 0x03	; 3
    2fec:	31 05       	cpc	r19, r1
    2fee:	0c f0       	brlt	.+2      	; 0x2ff2 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2ff0:	45 c0       	rjmp	.+138    	; 0x307c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff6:	81 30       	cpi	r24, 0x01	; 1
    2ff8:	91 05       	cpc	r25, r1
    2ffa:	09 f4       	brne	.+2      	; 0x2ffe <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2ffc:	39 c0       	rjmp	.+114    	; 0x3070 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2ffe:	67 c0       	rjmp	.+206    	; 0x30ce <KEYPAD_4x4_adjustKeyNumber+0x13a>
    3000:	2b 81       	ldd	r18, Y+3	; 0x03
    3002:	3c 81       	ldd	r19, Y+4	; 0x04
    3004:	26 30       	cpi	r18, 0x06	; 6
    3006:	31 05       	cpc	r19, r1
    3008:	09 f4       	brne	.+2      	; 0x300c <KEYPAD_4x4_adjustKeyNumber+0x78>
    300a:	41 c0       	rjmp	.+130    	; 0x308e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    300c:	8b 81       	ldd	r24, Y+3	; 0x03
    300e:	9c 81       	ldd	r25, Y+4	; 0x04
    3010:	87 30       	cpi	r24, 0x07	; 7
    3012:	91 05       	cpc	r25, r1
    3014:	0c f0       	brlt	.+2      	; 0x3018 <KEYPAD_4x4_adjustKeyNumber+0x84>
    3016:	3e c0       	rjmp	.+124    	; 0x3094 <KEYPAD_4x4_adjustKeyNumber+0x100>
    3018:	37 c0       	rjmp	.+110    	; 0x3088 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    301a:	2b 81       	ldd	r18, Y+3	; 0x03
    301c:	3c 81       	ldd	r19, Y+4	; 0x04
    301e:	2c 30       	cpi	r18, 0x0C	; 12
    3020:	31 05       	cpc	r19, r1
    3022:	09 f4       	brne	.+2      	; 0x3026 <KEYPAD_4x4_adjustKeyNumber+0x92>
    3024:	46 c0       	rjmp	.+140    	; 0x30b2 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    3026:	8b 81       	ldd	r24, Y+3	; 0x03
    3028:	9c 81       	ldd	r25, Y+4	; 0x04
    302a:	8d 30       	cpi	r24, 0x0D	; 13
    302c:	91 05       	cpc	r25, r1
    302e:	5c f4       	brge	.+22     	; 0x3046 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    3030:	2b 81       	ldd	r18, Y+3	; 0x03
    3032:	3c 81       	ldd	r19, Y+4	; 0x04
    3034:	2a 30       	cpi	r18, 0x0A	; 10
    3036:	31 05       	cpc	r19, r1
    3038:	b1 f1       	breq	.+108    	; 0x30a6 <KEYPAD_4x4_adjustKeyNumber+0x112>
    303a:	8b 81       	ldd	r24, Y+3	; 0x03
    303c:	9c 81       	ldd	r25, Y+4	; 0x04
    303e:	8b 30       	cpi	r24, 0x0B	; 11
    3040:	91 05       	cpc	r25, r1
    3042:	a4 f5       	brge	.+104    	; 0x30ac <KEYPAD_4x4_adjustKeyNumber+0x118>
    3044:	2d c0       	rjmp	.+90     	; 0x30a0 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    3046:	2b 81       	ldd	r18, Y+3	; 0x03
    3048:	3c 81       	ldd	r19, Y+4	; 0x04
    304a:	2e 30       	cpi	r18, 0x0E	; 14
    304c:	31 05       	cpc	r19, r1
    304e:	b9 f1       	breq	.+110    	; 0x30be <KEYPAD_4x4_adjustKeyNumber+0x12a>
    3050:	8b 81       	ldd	r24, Y+3	; 0x03
    3052:	9c 81       	ldd	r25, Y+4	; 0x04
    3054:	8e 30       	cpi	r24, 0x0E	; 14
    3056:	91 05       	cpc	r25, r1
    3058:	7c f1       	brlt	.+94     	; 0x30b8 <KEYPAD_4x4_adjustKeyNumber+0x124>
    305a:	2b 81       	ldd	r18, Y+3	; 0x03
    305c:	3c 81       	ldd	r19, Y+4	; 0x04
    305e:	2f 30       	cpi	r18, 0x0F	; 15
    3060:	31 05       	cpc	r19, r1
    3062:	79 f1       	breq	.+94     	; 0x30c2 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    3064:	8b 81       	ldd	r24, Y+3	; 0x03
    3066:	9c 81       	ldd	r25, Y+4	; 0x04
    3068:	80 31       	cpi	r24, 0x10	; 16
    306a:	91 05       	cpc	r25, r1
    306c:	69 f1       	breq	.+90     	; 0x30c8 <KEYPAD_4x4_adjustKeyNumber+0x134>
    306e:	2f c0       	rjmp	.+94     	; 0x30ce <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1:
		keypad_button = 1;
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	89 83       	std	Y+1, r24	; 0x01
    3074:	2e c0       	rjmp	.+92     	; 0x30d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button = 2;
    3076:	82 e0       	ldi	r24, 0x02	; 2
    3078:	89 83       	std	Y+1, r24	; 0x01
    307a:	2b c0       	rjmp	.+86     	; 0x30d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button = 3;
    307c:	83 e0       	ldi	r24, 0x03	; 3
    307e:	89 83       	std	Y+1, r24	; 0x01
    3080:	28 c0       	rjmp	.+80     	; 0x30d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button = '^';
    3082:	8e e5       	ldi	r24, 0x5E	; 94
    3084:	89 83       	std	Y+1, r24	; 0x01
    3086:	25 c0       	rjmp	.+74     	; 0x30d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button = 4;
    3088:	84 e0       	ldi	r24, 0x04	; 4
    308a:	89 83       	std	Y+1, r24	; 0x01
    308c:	22 c0       	rjmp	.+68     	; 0x30d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button = 5;
    308e:	85 e0       	ldi	r24, 0x05	; 5
    3090:	89 83       	std	Y+1, r24	; 0x01
    3092:	1f c0       	rjmp	.+62     	; 0x30d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button = 6;
    3094:	86 e0       	ldi	r24, 0x06	; 6
    3096:	89 83       	std	Y+1, r24	; 0x01
    3098:	1c c0       	rjmp	.+56     	; 0x30d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button = '^';
    309a:	8e e5       	ldi	r24, 0x5E	; 94
    309c:	89 83       	std	Y+1, r24	; 0x01
    309e:	19 c0       	rjmp	.+50     	; 0x30d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button = 7;
    30a0:	87 e0       	ldi	r24, 0x07	; 7
    30a2:	89 83       	std	Y+1, r24	; 0x01
    30a4:	16 c0       	rjmp	.+44     	; 0x30d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button = 8;
    30a6:	88 e0       	ldi	r24, 0x08	; 8
    30a8:	89 83       	std	Y+1, r24	; 0x01
    30aa:	13 c0       	rjmp	.+38     	; 0x30d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button = 9;
    30ac:	89 e0       	ldi	r24, 0x09	; 9
    30ae:	89 83       	std	Y+1, r24	; 0x01
    30b0:	10 c0       	rjmp	.+32     	; 0x30d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button = '^';
    30b2:	8e e5       	ldi	r24, 0x5E	; 94
    30b4:	89 83       	std	Y+1, r24	; 0x01
    30b6:	0d c0       	rjmp	.+26     	; 0x30d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button = '-';
    30b8:	8d e2       	ldi	r24, 0x2D	; 45
    30ba:	89 83       	std	Y+1, r24	; 0x01
    30bc:	0a c0       	rjmp	.+20     	; 0x30d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button = 0;
    30be:	19 82       	std	Y+1, r1	; 0x01
    30c0:	08 c0       	rjmp	.+16     	; 0x30d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button = '+';
    30c2:	8b e2       	ldi	r24, 0x2B	; 43
    30c4:	89 83       	std	Y+1, r24	; 0x01
    30c6:	05 c0       	rjmp	.+10     	; 0x30d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button = '#';
    30c8:	83 e2       	ldi	r24, 0x23	; 35
    30ca:	89 83       	std	Y+1, r24	; 0x01
    30cc:	02 c0       	rjmp	.+4      	; 0x30d2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button = button_number;
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
    30d0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	0f 90       	pop	r0
    30dc:	cf 91       	pop	r28
    30de:	df 91       	pop	r29
    30e0:	08 95       	ret

000030e2 <main>:
 * Function output: void.
 */
void INT1_Func(void);

int main(void)
{
    30e2:	df 93       	push	r29
    30e4:	cf 93       	push	r28
    30e6:	cd b7       	in	r28, 0x3d	; 61
    30e8:	de b7       	in	r29, 0x3e	; 62
    30ea:	a5 97       	sbiw	r28, 0x25	; 37
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	f8 94       	cli
    30f0:	de bf       	out	0x3e, r29	; 62
    30f2:	0f be       	out	0x3f, r0	; 63
    30f4:	cd bf       	out	0x3d, r28	; 61
	/* Configuration and initialization functions */

	uint16 adc_value;
	uint8 password[PASSWORD_LENGTH] =
	{ 1, 2, 3, 4, 5 }, enteredPassword[PASSWORD_LENGTH], i, flag = 0;
    30f6:	ce 01       	movw	r24, r28
    30f8:	43 96       	adiw	r24, 0x13	; 19
    30fa:	9a a3       	std	Y+34, r25	; 0x22
    30fc:	89 a3       	std	Y+33, r24	; 0x21
    30fe:	e0 eb       	ldi	r30, 0xB0	; 176
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	fc a3       	std	Y+36, r31	; 0x24
    3104:	eb a3       	std	Y+35, r30	; 0x23
    3106:	f5 e0       	ldi	r31, 0x05	; 5
    3108:	fd a3       	std	Y+37, r31	; 0x25
    310a:	eb a1       	ldd	r30, Y+35	; 0x23
    310c:	fc a1       	ldd	r31, Y+36	; 0x24
    310e:	00 80       	ld	r0, Z
    3110:	8b a1       	ldd	r24, Y+35	; 0x23
    3112:	9c a1       	ldd	r25, Y+36	; 0x24
    3114:	01 96       	adiw	r24, 0x01	; 1
    3116:	9c a3       	std	Y+36, r25	; 0x24
    3118:	8b a3       	std	Y+35, r24	; 0x23
    311a:	e9 a1       	ldd	r30, Y+33	; 0x21
    311c:	fa a1       	ldd	r31, Y+34	; 0x22
    311e:	00 82       	st	Z, r0
    3120:	89 a1       	ldd	r24, Y+33	; 0x21
    3122:	9a a1       	ldd	r25, Y+34	; 0x22
    3124:	01 96       	adiw	r24, 0x01	; 1
    3126:	9a a3       	std	Y+34, r25	; 0x22
    3128:	89 a3       	std	Y+33, r24	; 0x21
    312a:	9d a1       	ldd	r25, Y+37	; 0x25
    312c:	91 50       	subi	r25, 0x01	; 1
    312e:	9d a3       	std	Y+37, r25	; 0x25
    3130:	ed a1       	ldd	r30, Y+37	; 0x25
    3132:	ee 23       	and	r30, r30
    3134:	51 f7       	brne	.-44     	; 0x310a <main+0x28>
    3136:	1f 86       	std	Y+15, r1	; 0x0f

	/* select the configuration of ADC */
	ADC_ConfigType ADC_LDR =
	{ AVCC, PRESCALER_128 };
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	8d 8f       	std	Y+29, r24	; 0x1d
    313c:	87 e0       	ldi	r24, 0x07	; 7
    313e:	8e 8f       	std	Y+30, r24	; 0x1e

	/* select the configuration of EXT0 */
	EXT_INT0_ConfigType EXT_INT0_Config =
	{ RISING_EDGE };
    3140:	83 e0       	ldi	r24, 0x03	; 3
    3142:	8f 8f       	std	Y+31, r24	; 0x1f

	/* select the configuration of EXT1 */
	EXT_INT1_ConfigType EXT_INT1_Config =
	{ RISING_EDGE };
    3144:	83 e0       	ldi	r24, 0x03	; 3
    3146:	88 a3       	std	Y+32, r24	; 0x20

	/* passing the configuration to initialization function of EXT0 */
	EXT_INT0_init(&EXT_INT0_Config);
    3148:	ce 01       	movw	r24, r28
    314a:	4f 96       	adiw	r24, 0x1f	; 31
    314c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <EXT_INT0_init>
	/* passing the configuration to initialization function of EXT01 */
	EXT_INT1_init(&EXT_INT1_Config);
    3150:	ce 01       	movw	r24, r28
    3152:	80 96       	adiw	r24, 0x20	; 32
    3154:	0e 94 ed 0a 	call	0x15da	; 0x15da <EXT_INT1_init>

	/* passing the configuration to initialization function of ADC */
	ADC_init(&ADC_LDR);
    3158:	ce 01       	movw	r24, r28
    315a:	4d 96       	adiw	r24, 0x1d	; 29
    315c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <ADC_init>

	/* setup the call back function */
	EXT_INT0_setCallBack(INT0_Func);
    3160:	83 e7       	ldi	r24, 0x73	; 115
    3162:	9a e1       	ldi	r25, 0x1A	; 26
    3164:	0e 94 3d 0b 	call	0x167a	; 0x167a <EXT_INT0_setCallBack>
	/* setup the call back function */
	EXT_INT1_setCallBack(INT1_Func);
    3168:	88 e0       	ldi	r24, 0x08	; 8
    316a:	9b e1       	ldi	r25, 0x1B	; 27
    316c:	0e 94 4f 0b 	call	0x169e	; 0x169e <EXT_INT1_setCallBack>

	/* call the initialization function of LCD */
	LCD_init();
    3170:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <LCD_init>

	/* call the initialization function of SERVO */
	ServoMotor_init();
    3174:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ServoMotor_init>

	/* call the initialization function of LAMP */
	LAMP_init();
    3178:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <LAMP_init>

	/* enable global interrupt */
	SREG_REG.Bits.I_Bit = 1;
    317c:	ef e5       	ldi	r30, 0x5F	; 95
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	80 81       	ld	r24, Z
    3182:	80 68       	ori	r24, 0x80	; 128
    3184:	80 83       	st	Z, r24
    3186:	2d c0       	rjmp	.+90     	; 0x31e2 <main+0x100>

	/* loop until user enter the correct password */
	while (!flag)
	{
		/* take the input password from user */
		LCD_clearScreen();
    3188:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_clearScreen>
		LCD_displayString("Enter Password:");
    318c:	80 e6       	ldi	r24, 0x60	; 96
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	0e 94 03 16 	call	0x2c06	; 0x2c06 <LCD_displayString>
		LCD_moveCursor(1, 0);
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	60 e0       	ldi	r22, 0x00	; 0
    3198:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <LCD_moveCursor>
		getPasswordFromKeyPad(enteredPassword);
    319c:	ce 01       	movw	r24, r28
    319e:	48 96       	adiw	r24, 0x18	; 24
    31a0:	0e 94 c3 19 	call	0x3386	; 0x3386 <getPasswordFromKeyPad>
		/* suppose that the password is correct */
		flag = 1;
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	8f 87       	std	Y+15, r24	; 0x0f
		/* loop through each number and check if they are equal or not */
		for (i = 0; i < PASSWORD_LENGTH; i++)
    31a8:	18 8a       	std	Y+16, r1	; 0x10
    31aa:	18 c0       	rjmp	.+48     	; 0x31dc <main+0xfa>
		{
			/* if they are not equal, then the assumption is incorrect */
			if (enteredPassword[i] != password[i])
    31ac:	88 89       	ldd	r24, Y+16	; 0x10
    31ae:	28 2f       	mov	r18, r24
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	ce 01       	movw	r24, r28
    31b4:	48 96       	adiw	r24, 0x18	; 24
    31b6:	fc 01       	movw	r30, r24
    31b8:	e2 0f       	add	r30, r18
    31ba:	f3 1f       	adc	r31, r19
    31bc:	40 81       	ld	r20, Z
    31be:	88 89       	ldd	r24, Y+16	; 0x10
    31c0:	28 2f       	mov	r18, r24
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	ce 01       	movw	r24, r28
    31c6:	43 96       	adiw	r24, 0x13	; 19
    31c8:	fc 01       	movw	r30, r24
    31ca:	e2 0f       	add	r30, r18
    31cc:	f3 1f       	adc	r31, r19
    31ce:	80 81       	ld	r24, Z
    31d0:	48 17       	cp	r20, r24
    31d2:	09 f0       	breq	.+2      	; 0x31d6 <main+0xf4>
			{
				flag = 0;
    31d4:	1f 86       	std	Y+15, r1	; 0x0f
		LCD_moveCursor(1, 0);
		getPasswordFromKeyPad(enteredPassword);
		/* suppose that the password is correct */
		flag = 1;
		/* loop through each number and check if they are equal or not */
		for (i = 0; i < PASSWORD_LENGTH; i++)
    31d6:	88 89       	ldd	r24, Y+16	; 0x10
    31d8:	8f 5f       	subi	r24, 0xFF	; 255
    31da:	88 8b       	std	Y+16, r24	; 0x10
    31dc:	88 89       	ldd	r24, Y+16	; 0x10
    31de:	85 30       	cpi	r24, 0x05	; 5
    31e0:	28 f3       	brcs	.-54     	; 0x31ac <main+0xca>

	/* enable global interrupt */
	SREG_REG.Bits.I_Bit = 1;

	/* loop until user enter the correct password */
	while (!flag)
    31e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    31e4:	88 23       	and	r24, r24
    31e6:	81 f2       	breq	.-96     	; 0x3188 <main+0xa6>
			}
		}
	}

	/* welcome message in LCD */
	LCD_clearScreen();
    31e8:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_clearScreen>
	LCD_displayString("Welcome To Our");
    31ec:	80 e7       	ldi	r24, 0x70	; 112
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	0e 94 03 16 	call	0x2c06	; 0x2c06 <LCD_displayString>
	LCD_moveCursor(1, 0);
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	60 e0       	ldi	r22, 0x00	; 0
    31f8:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <LCD_moveCursor>
	LCD_displayString("Smart Garage");
    31fc:	8f e7       	ldi	r24, 0x7F	; 127
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	0e 94 03 16 	call	0x2c06	; 0x2c06 <LCD_displayString>
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	90 e8       	ldi	r25, 0x80	; 128
    3208:	ab eb       	ldi	r26, 0xBB	; 187
    320a:	b4 e4       	ldi	r27, 0x44	; 68
    320c:	8b 87       	std	Y+11, r24	; 0x0b
    320e:	9c 87       	std	Y+12, r25	; 0x0c
    3210:	ad 87       	std	Y+13, r26	; 0x0d
    3212:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3214:	6b 85       	ldd	r22, Y+11	; 0x0b
    3216:	7c 85       	ldd	r23, Y+12	; 0x0c
    3218:	8d 85       	ldd	r24, Y+13	; 0x0d
    321a:	9e 85       	ldd	r25, Y+14	; 0x0e
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	4a e7       	ldi	r20, 0x7A	; 122
    3222:	55 e4       	ldi	r21, 0x45	; 69
    3224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	8f 83       	std	Y+7, r24	; 0x07
    322e:	98 87       	std	Y+8, r25	; 0x08
    3230:	a9 87       	std	Y+9, r26	; 0x09
    3232:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3234:	6f 81       	ldd	r22, Y+7	; 0x07
    3236:	78 85       	ldd	r23, Y+8	; 0x08
    3238:	89 85       	ldd	r24, Y+9	; 0x09
    323a:	9a 85       	ldd	r25, Y+10	; 0x0a
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e8       	ldi	r20, 0x80	; 128
    3242:	5f e3       	ldi	r21, 0x3F	; 63
    3244:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3248:	88 23       	and	r24, r24
    324a:	2c f4       	brge	.+10     	; 0x3256 <main+0x174>
		__ticks = 1;
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	9e 83       	std	Y+6, r25	; 0x06
    3252:	8d 83       	std	Y+5, r24	; 0x05
    3254:	3f c0       	rjmp	.+126    	; 0x32d4 <main+0x1f2>
	else if (__tmp > 65535)
    3256:	6f 81       	ldd	r22, Y+7	; 0x07
    3258:	78 85       	ldd	r23, Y+8	; 0x08
    325a:	89 85       	ldd	r24, Y+9	; 0x09
    325c:	9a 85       	ldd	r25, Y+10	; 0x0a
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	3f ef       	ldi	r19, 0xFF	; 255
    3262:	4f e7       	ldi	r20, 0x7F	; 127
    3264:	57 e4       	ldi	r21, 0x47	; 71
    3266:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    326a:	18 16       	cp	r1, r24
    326c:	4c f5       	brge	.+82     	; 0x32c0 <main+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3270:	7c 85       	ldd	r23, Y+12	; 0x0c
    3272:	8d 85       	ldd	r24, Y+13	; 0x0d
    3274:	9e 85       	ldd	r25, Y+14	; 0x0e
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	40 e2       	ldi	r20, 0x20	; 32
    327c:	51 e4       	ldi	r21, 0x41	; 65
    327e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	bc 01       	movw	r22, r24
    3288:	cd 01       	movw	r24, r26
    328a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	9e 83       	std	Y+6, r25	; 0x06
    3294:	8d 83       	std	Y+5, r24	; 0x05
    3296:	0f c0       	rjmp	.+30     	; 0x32b6 <main+0x1d4>
    3298:	80 e9       	ldi	r24, 0x90	; 144
    329a:	91 e0       	ldi	r25, 0x01	; 1
    329c:	9c 83       	std	Y+4, r25	; 0x04
    329e:	8b 83       	std	Y+3, r24	; 0x03
    32a0:	8b 81       	ldd	r24, Y+3	; 0x03
    32a2:	9c 81       	ldd	r25, Y+4	; 0x04
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	f1 f7       	brne	.-4      	; 0x32a4 <main+0x1c2>
    32a8:	9c 83       	std	Y+4, r25	; 0x04
    32aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ac:	8d 81       	ldd	r24, Y+5	; 0x05
    32ae:	9e 81       	ldd	r25, Y+6	; 0x06
    32b0:	01 97       	sbiw	r24, 0x01	; 1
    32b2:	9e 83       	std	Y+6, r25	; 0x06
    32b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b6:	8d 81       	ldd	r24, Y+5	; 0x05
    32b8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ba:	00 97       	sbiw	r24, 0x00	; 0
    32bc:	69 f7       	brne	.-38     	; 0x3298 <main+0x1b6>
    32be:	14 c0       	rjmp	.+40     	; 0x32e8 <main+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c0:	6f 81       	ldd	r22, Y+7	; 0x07
    32c2:	78 85       	ldd	r23, Y+8	; 0x08
    32c4:	89 85       	ldd	r24, Y+9	; 0x09
    32c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	9e 83       	std	Y+6, r25	; 0x06
    32d2:	8d 83       	std	Y+5, r24	; 0x05
    32d4:	8d 81       	ldd	r24, Y+5	; 0x05
    32d6:	9e 81       	ldd	r25, Y+6	; 0x06
    32d8:	9a 83       	std	Y+2, r25	; 0x02
    32da:	89 83       	std	Y+1, r24	; 0x01
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	9a 81       	ldd	r25, Y+2	; 0x02
    32e0:	01 97       	sbiw	r24, 0x01	; 1
    32e2:	f1 f7       	brne	.-4      	; 0x32e0 <main+0x1fe>
    32e4:	9a 83       	std	Y+2, r25	; 0x02
    32e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);

	/* display number of cars and state of lights */
	LCD_clearScreen();
    32e8:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_clearScreen>
	LCD_displayString("Cars: ");
    32ec:	8c e8       	ldi	r24, 0x8C	; 140
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	0e 94 03 16 	call	0x2c06	; 0x2c06 <LCD_displayString>
	LCD_moveCursor(1, 0);
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	60 e0       	ldi	r22, 0x00	; 0
    32f8:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <LCD_moveCursor>
	LCD_displayString("Lights: ");
    32fc:	83 e9       	ldi	r24, 0x93	; 147
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	0e 94 03 16 	call	0x2c06	; 0x2c06 <LCD_displayString>

	while (1)
	{
		/* get the adc value of LDR */
		adc_value = LDRsensor_getValue();
    3304:	0e 94 48 0c 	call	0x1890	; 0x1890 <LDRsensor_getValue>
    3308:	9a 8b       	std	Y+18, r25	; 0x12
    330a:	89 8b       	std	Y+17, r24	; 0x11

		/* display the number of cars in LCD */
		LCD_moveCursor(0, 5);
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	65 e0       	ldi	r22, 0x05	; 5
    3310:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <LCD_moveCursor>
		LCD_intgerToString(carsCounter);
    3314:	80 91 be 00 	lds	r24, 0x00BE
    3318:	88 2f       	mov	r24, r24
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <LCD_intgerToString>

		/* this condition only for LCD display the specific digits from the data  */
		if (carsCounter < 100)
    3320:	80 91 be 00 	lds	r24, 0x00BE
    3324:	84 36       	cpi	r24, 0x64	; 100
    3326:	38 f4       	brcc	.+14     	; 0x3336 <main+0x254>
		{
			LCD_moveCursor(0, 7);
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	67 e0       	ldi	r22, 0x07	; 7
    332c:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <LCD_moveCursor>
			LCD_displayCharacter(' ');
    3330:	80 e2       	ldi	r24, 0x20	; 32
    3332:	0e 94 88 11 	call	0x2310	; 0x2310 <LCD_displayCharacter>
		}
		if (carsCounter < 10)
    3336:	80 91 be 00 	lds	r24, 0x00BE
    333a:	8a 30       	cpi	r24, 0x0A	; 10
    333c:	38 f4       	brcc	.+14     	; 0x334c <main+0x26a>
		{
			LCD_moveCursor(0, 6);
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	66 e0       	ldi	r22, 0x06	; 6
    3342:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <LCD_moveCursor>
			LCD_displayCharacter(' ');
    3346:	80 e2       	ldi	r24, 0x20	; 32
    3348:	0e 94 88 11 	call	0x2310	; 0x2310 <LCD_displayCharacter>

		/*
		 * check the state of reading, if less than or equal 50 then activate the lamp
		 * else turn off lamp
		 */
		if (adc_value > 512)
    334c:	89 89       	ldd	r24, Y+17	; 0x11
    334e:	9a 89       	ldd	r25, Y+18	; 0x12
    3350:	f2 e0       	ldi	r31, 0x02	; 2
    3352:	81 30       	cpi	r24, 0x01	; 1
    3354:	9f 07       	cpc	r25, r31
    3356:	68 f0       	brcs	.+26     	; 0x3372 <main+0x290>
		{
			LCD_displayStringRowColumn(1, 7, "ON");
    3358:	2c e9       	ldi	r18, 0x9C	; 156
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	67 e0       	ldi	r22, 0x07	; 7
    3360:	a9 01       	movw	r20, r18
    3362:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <LCD_displayStringRowColumn>
			/*
			 * this to only this the character after ON is space
			 * when switch from OFF to ON we need to remove the last F latter
			 */
			LCD_displayCharacter(' ');
    3366:	80 e2       	ldi	r24, 0x20	; 32
    3368:	0e 94 88 11 	call	0x2310	; 0x2310 <LCD_displayCharacter>
			LAMP_ON();
    336c:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LAMP_ON>
    3370:	c9 cf       	rjmp	.-110    	; 0x3304 <main+0x222>
		}
		else
		{
			LCD_displayStringRowColumn(1, 7, "OFF");
    3372:	2f e9       	ldi	r18, 0x9F	; 159
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	67 e0       	ldi	r22, 0x07	; 7
    337a:	a9 01       	movw	r20, r18
    337c:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <LCD_displayStringRowColumn>

			LAMP_OFF();
    3380:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <LAMP_OFF>
    3384:	bf cf       	rjmp	.-130    	; 0x3304 <main+0x222>

00003386 <getPasswordFromKeyPad>:
 * Function to active keypad to get input number from it.
 * Function input:  array of uint8 to save numbers from keypad on it.
 * Function output: void.
 */
void getPasswordFromKeyPad(uint8 password[])
{
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	62 97       	sbiw	r28, 0x12	; 18
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	de bf       	out	0x3e, r29	; 62
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	cd bf       	out	0x3d, r28	; 61
    339a:	9a 8b       	std	Y+18, r25	; 0x12
    339c:	89 8b       	std	Y+17, r24	; 0x11
	uint8 i, temp;
	i = 0; /* the index and counter for the loop and equal 5 as password is 5 numbers */
    339e:	18 8a       	std	Y+16, r1	; 0x10
    33a0:	91 c0       	rjmp	.+290    	; 0x34c4 <getPasswordFromKeyPad+0x13e>
	while (i < PASSWORD_LENGTH)
	{
		/* take the input number form keypad */
		temp = KEYPAD_getPressedKey();
    33a2:	0e 94 dd 16 	call	0x2dba	; 0x2dba <KEYPAD_getPressedKey>
    33a6:	8f 87       	std	Y+15, r24	; 0x0f
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	aa e7       	ldi	r26, 0x7A	; 122
    33ae:	b3 e4       	ldi	r27, 0x43	; 67
    33b0:	8b 87       	std	Y+11, r24	; 0x0b
    33b2:	9c 87       	std	Y+12, r25	; 0x0c
    33b4:	ad 87       	std	Y+13, r26	; 0x0d
    33b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    33ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    33bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    33be:	9e 85       	ldd	r25, Y+14	; 0x0e
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	4a e7       	ldi	r20, 0x7A	; 122
    33c6:	55 e4       	ldi	r21, 0x45	; 69
    33c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	8f 83       	std	Y+7, r24	; 0x07
    33d2:	98 87       	std	Y+8, r25	; 0x08
    33d4:	a9 87       	std	Y+9, r26	; 0x09
    33d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33d8:	6f 81       	ldd	r22, Y+7	; 0x07
    33da:	78 85       	ldd	r23, Y+8	; 0x08
    33dc:	89 85       	ldd	r24, Y+9	; 0x09
    33de:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	40 e8       	ldi	r20, 0x80	; 128
    33e6:	5f e3       	ldi	r21, 0x3F	; 63
    33e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ec:	88 23       	and	r24, r24
    33ee:	2c f4       	brge	.+10     	; 0x33fa <getPasswordFromKeyPad+0x74>
		__ticks = 1;
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	9e 83       	std	Y+6, r25	; 0x06
    33f6:	8d 83       	std	Y+5, r24	; 0x05
    33f8:	3f c0       	rjmp	.+126    	; 0x3478 <getPasswordFromKeyPad+0xf2>
	else if (__tmp > 65535)
    33fa:	6f 81       	ldd	r22, Y+7	; 0x07
    33fc:	78 85       	ldd	r23, Y+8	; 0x08
    33fe:	89 85       	ldd	r24, Y+9	; 0x09
    3400:	9a 85       	ldd	r25, Y+10	; 0x0a
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	3f ef       	ldi	r19, 0xFF	; 255
    3406:	4f e7       	ldi	r20, 0x7F	; 127
    3408:	57 e4       	ldi	r21, 0x47	; 71
    340a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    340e:	18 16       	cp	r1, r24
    3410:	4c f5       	brge	.+82     	; 0x3464 <getPasswordFromKeyPad+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3412:	6b 85       	ldd	r22, Y+11	; 0x0b
    3414:	7c 85       	ldd	r23, Y+12	; 0x0c
    3416:	8d 85       	ldd	r24, Y+13	; 0x0d
    3418:	9e 85       	ldd	r25, Y+14	; 0x0e
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	40 e2       	ldi	r20, 0x20	; 32
    3420:	51 e4       	ldi	r21, 0x41	; 65
    3422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3426:	dc 01       	movw	r26, r24
    3428:	cb 01       	movw	r24, r22
    342a:	bc 01       	movw	r22, r24
    342c:	cd 01       	movw	r24, r26
    342e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	9e 83       	std	Y+6, r25	; 0x06
    3438:	8d 83       	std	Y+5, r24	; 0x05
    343a:	0f c0       	rjmp	.+30     	; 0x345a <getPasswordFromKeyPad+0xd4>
    343c:	80 e9       	ldi	r24, 0x90	; 144
    343e:	91 e0       	ldi	r25, 0x01	; 1
    3440:	9c 83       	std	Y+4, r25	; 0x04
    3442:	8b 83       	std	Y+3, r24	; 0x03
    3444:	8b 81       	ldd	r24, Y+3	; 0x03
    3446:	9c 81       	ldd	r25, Y+4	; 0x04
    3448:	01 97       	sbiw	r24, 0x01	; 1
    344a:	f1 f7       	brne	.-4      	; 0x3448 <getPasswordFromKeyPad+0xc2>
    344c:	9c 83       	std	Y+4, r25	; 0x04
    344e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3450:	8d 81       	ldd	r24, Y+5	; 0x05
    3452:	9e 81       	ldd	r25, Y+6	; 0x06
    3454:	01 97       	sbiw	r24, 0x01	; 1
    3456:	9e 83       	std	Y+6, r25	; 0x06
    3458:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    345a:	8d 81       	ldd	r24, Y+5	; 0x05
    345c:	9e 81       	ldd	r25, Y+6	; 0x06
    345e:	00 97       	sbiw	r24, 0x00	; 0
    3460:	69 f7       	brne	.-38     	; 0x343c <getPasswordFromKeyPad+0xb6>
    3462:	14 c0       	rjmp	.+40     	; 0x348c <getPasswordFromKeyPad+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3464:	6f 81       	ldd	r22, Y+7	; 0x07
    3466:	78 85       	ldd	r23, Y+8	; 0x08
    3468:	89 85       	ldd	r24, Y+9	; 0x09
    346a:	9a 85       	ldd	r25, Y+10	; 0x0a
    346c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	9e 83       	std	Y+6, r25	; 0x06
    3476:	8d 83       	std	Y+5, r24	; 0x05
    3478:	8d 81       	ldd	r24, Y+5	; 0x05
    347a:	9e 81       	ldd	r25, Y+6	; 0x06
    347c:	9a 83       	std	Y+2, r25	; 0x02
    347e:	89 83       	std	Y+1, r24	; 0x01
    3480:	89 81       	ldd	r24, Y+1	; 0x01
    3482:	9a 81       	ldd	r25, Y+2	; 0x02
    3484:	01 97       	sbiw	r24, 0x01	; 1
    3486:	f1 f7       	brne	.-4      	; 0x3484 <getPasswordFromKeyPad+0xfe>
    3488:	9a 83       	std	Y+2, r25	; 0x02
    348a:	89 83       	std	Y+1, r24	; 0x01
		/* wait 250msec before getting a new press from the keypad buttons, Press time is 250msec */
		_delay_ms(250);
		/* if the input is not a number form 0 to 9 then repeat taking input step */
		/* ^ for the keys don't have a number or # or - or + */
		if (temp == '^' || temp == '#' || temp == '-' || temp == '+')
    348c:	8f 85       	ldd	r24, Y+15	; 0x0f
    348e:	8e 35       	cpi	r24, 0x5E	; 94
    3490:	c9 f0       	breq	.+50     	; 0x34c4 <getPasswordFromKeyPad+0x13e>
    3492:	8f 85       	ldd	r24, Y+15	; 0x0f
    3494:	83 32       	cpi	r24, 0x23	; 35
    3496:	b1 f0       	breq	.+44     	; 0x34c4 <getPasswordFromKeyPad+0x13e>
    3498:	8f 85       	ldd	r24, Y+15	; 0x0f
    349a:	8d 32       	cpi	r24, 0x2D	; 45
    349c:	99 f0       	breq	.+38     	; 0x34c4 <getPasswordFromKeyPad+0x13e>
    349e:	8f 85       	ldd	r24, Y+15	; 0x0f
    34a0:	8b 32       	cpi	r24, 0x2B	; 43
    34a2:	81 f0       	breq	.+32     	; 0x34c4 <getPasswordFromKeyPad+0x13e>
		{
			continue;
		}
		/* the input is a number, then save it to its index in array */
		password[i] = temp;
    34a4:	88 89       	ldd	r24, Y+16	; 0x10
    34a6:	28 2f       	mov	r18, r24
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	89 89       	ldd	r24, Y+17	; 0x11
    34ac:	9a 89       	ldd	r25, Y+18	; 0x12
    34ae:	fc 01       	movw	r30, r24
    34b0:	e2 0f       	add	r30, r18
    34b2:	f3 1f       	adc	r31, r19
    34b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    34b6:	80 83       	st	Z, r24
		/* display the * char in LCD */
		LCD_displayCharacter('*');
    34b8:	8a e2       	ldi	r24, 0x2A	; 42
    34ba:	0e 94 88 11 	call	0x2310	; 0x2310 <LCD_displayCharacter>
		/* increment the index */
		i++;
    34be:	88 89       	ldd	r24, Y+16	; 0x10
    34c0:	8f 5f       	subi	r24, 0xFF	; 255
    34c2:	88 8b       	std	Y+16, r24	; 0x10
 */
void getPasswordFromKeyPad(uint8 password[])
{
	uint8 i, temp;
	i = 0; /* the index and counter for the loop and equal 5 as password is 5 numbers */
	while (i < PASSWORD_LENGTH)
    34c4:	88 89       	ldd	r24, Y+16	; 0x10
    34c6:	85 30       	cpi	r24, 0x05	; 5
    34c8:	08 f4       	brcc	.+2      	; 0x34cc <getPasswordFromKeyPad+0x146>
    34ca:	6b cf       	rjmp	.-298    	; 0x33a2 <getPasswordFromKeyPad+0x1c>
		LCD_displayCharacter('*');
		/* increment the index */
		i++;
	}
	/* waiting for pressing enter key */
	while (KEYPAD_getPressedKey() != '#')
    34cc:	0e 94 dd 16 	call	0x2dba	; 0x2dba <KEYPAD_getPressedKey>
    34d0:	83 32       	cpi	r24, 0x23	; 35
    34d2:	e1 f7       	brne	.-8      	; 0x34cc <getPasswordFromKeyPad+0x146>
		;
}
    34d4:	62 96       	adiw	r28, 0x12	; 18
    34d6:	0f b6       	in	r0, 0x3f	; 63
    34d8:	f8 94       	cli
    34da:	de bf       	out	0x3e, r29	; 62
    34dc:	0f be       	out	0x3f, r0	; 63
    34de:	cd bf       	out	0x3d, r28	; 61
    34e0:	cf 91       	pop	r28
    34e2:	df 91       	pop	r29
    34e4:	08 95       	ret

000034e6 <INT0_Func>:
 * This is the call back function which will be executed each interrupt in INT0.
 * Function input:  void.
 * Function output: void.
 */
void INT0_Func(void)
{
    34e6:	df 93       	push	r29
    34e8:	cf 93       	push	r28
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
    34ee:	2e 97       	sbiw	r28, 0x0e	; 14
    34f0:	0f b6       	in	r0, 0x3f	; 63
    34f2:	f8 94       	cli
    34f4:	de bf       	out	0x3e, r29	; 62
    34f6:	0f be       	out	0x3f, r0	; 63
    34f8:	cd bf       	out	0x3d, r28	; 61
	/* check if the garage is not full */
	if (carsCounter < MAX_CARS_NUMBER)
    34fa:	80 91 be 00 	lds	r24, 0x00BE
    34fe:	8a 30       	cpi	r24, 0x0A	; 10
    3500:	08 f0       	brcs	.+2      	; 0x3504 <INT0_Func+0x1e>
    3502:	7d c0       	rjmp	.+250    	; 0x35fe <INT0_Func+0x118>
	{
		/* then increment the counter */
		carsCounter++;
    3504:	80 91 be 00 	lds	r24, 0x00BE
    3508:	8f 5f       	subi	r24, 0xFF	; 255
    350a:	80 93 be 00 	sts	0x00BE, r24
		/* open the door by servo motor */
		ServoMotor_Rotate(Degree_90);
    350e:	81 e0       	ldi	r24, 0x01	; 1
    3510:	0e 94 20 0c 	call	0x1840	; 0x1840 <ServoMotor_Rotate>
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	aa ef       	ldi	r26, 0xFA	; 250
    351a:	b4 e4       	ldi	r27, 0x44	; 68
    351c:	8b 87       	std	Y+11, r24	; 0x0b
    351e:	9c 87       	std	Y+12, r25	; 0x0c
    3520:	ad 87       	std	Y+13, r26	; 0x0d
    3522:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3524:	6b 85       	ldd	r22, Y+11	; 0x0b
    3526:	7c 85       	ldd	r23, Y+12	; 0x0c
    3528:	8d 85       	ldd	r24, Y+13	; 0x0d
    352a:	9e 85       	ldd	r25, Y+14	; 0x0e
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	4a e7       	ldi	r20, 0x7A	; 122
    3532:	55 e4       	ldi	r21, 0x45	; 69
    3534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	8f 83       	std	Y+7, r24	; 0x07
    353e:	98 87       	std	Y+8, r25	; 0x08
    3540:	a9 87       	std	Y+9, r26	; 0x09
    3542:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3544:	6f 81       	ldd	r22, Y+7	; 0x07
    3546:	78 85       	ldd	r23, Y+8	; 0x08
    3548:	89 85       	ldd	r24, Y+9	; 0x09
    354a:	9a 85       	ldd	r25, Y+10	; 0x0a
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	40 e8       	ldi	r20, 0x80	; 128
    3552:	5f e3       	ldi	r21, 0x3F	; 63
    3554:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3558:	88 23       	and	r24, r24
    355a:	2c f4       	brge	.+10     	; 0x3566 <INT0_Func+0x80>
		__ticks = 1;
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	9e 83       	std	Y+6, r25	; 0x06
    3562:	8d 83       	std	Y+5, r24	; 0x05
    3564:	3f c0       	rjmp	.+126    	; 0x35e4 <INT0_Func+0xfe>
	else if (__tmp > 65535)
    3566:	6f 81       	ldd	r22, Y+7	; 0x07
    3568:	78 85       	ldd	r23, Y+8	; 0x08
    356a:	89 85       	ldd	r24, Y+9	; 0x09
    356c:	9a 85       	ldd	r25, Y+10	; 0x0a
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	3f ef       	ldi	r19, 0xFF	; 255
    3572:	4f e7       	ldi	r20, 0x7F	; 127
    3574:	57 e4       	ldi	r21, 0x47	; 71
    3576:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    357a:	18 16       	cp	r1, r24
    357c:	4c f5       	brge	.+82     	; 0x35d0 <INT0_Func+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    357e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3580:	7c 85       	ldd	r23, Y+12	; 0x0c
    3582:	8d 85       	ldd	r24, Y+13	; 0x0d
    3584:	9e 85       	ldd	r25, Y+14	; 0x0e
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	40 e2       	ldi	r20, 0x20	; 32
    358c:	51 e4       	ldi	r21, 0x41	; 65
    358e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	bc 01       	movw	r22, r24
    3598:	cd 01       	movw	r24, r26
    359a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	9e 83       	std	Y+6, r25	; 0x06
    35a4:	8d 83       	std	Y+5, r24	; 0x05
    35a6:	0f c0       	rjmp	.+30     	; 0x35c6 <INT0_Func+0xe0>
    35a8:	80 e9       	ldi	r24, 0x90	; 144
    35aa:	91 e0       	ldi	r25, 0x01	; 1
    35ac:	9c 83       	std	Y+4, r25	; 0x04
    35ae:	8b 83       	std	Y+3, r24	; 0x03
    35b0:	8b 81       	ldd	r24, Y+3	; 0x03
    35b2:	9c 81       	ldd	r25, Y+4	; 0x04
    35b4:	01 97       	sbiw	r24, 0x01	; 1
    35b6:	f1 f7       	brne	.-4      	; 0x35b4 <INT0_Func+0xce>
    35b8:	9c 83       	std	Y+4, r25	; 0x04
    35ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35bc:	8d 81       	ldd	r24, Y+5	; 0x05
    35be:	9e 81       	ldd	r25, Y+6	; 0x06
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	9e 83       	std	Y+6, r25	; 0x06
    35c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c6:	8d 81       	ldd	r24, Y+5	; 0x05
    35c8:	9e 81       	ldd	r25, Y+6	; 0x06
    35ca:	00 97       	sbiw	r24, 0x00	; 0
    35cc:	69 f7       	brne	.-38     	; 0x35a8 <INT0_Func+0xc2>
    35ce:	14 c0       	rjmp	.+40     	; 0x35f8 <INT0_Func+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d0:	6f 81       	ldd	r22, Y+7	; 0x07
    35d2:	78 85       	ldd	r23, Y+8	; 0x08
    35d4:	89 85       	ldd	r24, Y+9	; 0x09
    35d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	9e 83       	std	Y+6, r25	; 0x06
    35e2:	8d 83       	std	Y+5, r24	; 0x05
    35e4:	8d 81       	ldd	r24, Y+5	; 0x05
    35e6:	9e 81       	ldd	r25, Y+6	; 0x06
    35e8:	9a 83       	std	Y+2, r25	; 0x02
    35ea:	89 83       	std	Y+1, r24	; 0x01
    35ec:	89 81       	ldd	r24, Y+1	; 0x01
    35ee:	9a 81       	ldd	r25, Y+2	; 0x02
    35f0:	01 97       	sbiw	r24, 0x01	; 1
    35f2:	f1 f7       	brne	.-4      	; 0x35f0 <INT0_Func+0x10a>
    35f4:	9a 83       	std	Y+2, r25	; 0x02
    35f6:	89 83       	std	Y+1, r24	; 0x01
		/* wait 2 seconds */
		_delay_ms(2000);
		/* close the door by servo motor */
		ServoMotor_Rotate(Degree_0);
    35f8:	80 e0       	ldi	r24, 0x00	; 0
    35fa:	0e 94 20 0c 	call	0x1840	; 0x1840 <ServoMotor_Rotate>
	}
}
    35fe:	2e 96       	adiw	r28, 0x0e	; 14
    3600:	0f b6       	in	r0, 0x3f	; 63
    3602:	f8 94       	cli
    3604:	de bf       	out	0x3e, r29	; 62
    3606:	0f be       	out	0x3f, r0	; 63
    3608:	cd bf       	out	0x3d, r28	; 61
    360a:	cf 91       	pop	r28
    360c:	df 91       	pop	r29
    360e:	08 95       	ret

00003610 <INT1_Func>:
 * This is the call back function which will be executed each interrupt in INT1.
 * Function input:  void.
 * Function output: void.
 */
void INT1_Func(void)
{
    3610:	df 93       	push	r29
    3612:	cf 93       	push	r28
    3614:	cd b7       	in	r28, 0x3d	; 61
    3616:	de b7       	in	r29, 0x3e	; 62
    3618:	2e 97       	sbiw	r28, 0x0e	; 14
    361a:	0f b6       	in	r0, 0x3f	; 63
    361c:	f8 94       	cli
    361e:	de bf       	out	0x3e, r29	; 62
    3620:	0f be       	out	0x3f, r0	; 63
    3622:	cd bf       	out	0x3d, r28	; 61
	/* check if the garage is not empty */
	if (carsCounter > 0)
    3624:	80 91 be 00 	lds	r24, 0x00BE
    3628:	88 23       	and	r24, r24
    362a:	09 f4       	brne	.+2      	; 0x362e <INT1_Func+0x1e>
    362c:	7d c0       	rjmp	.+250    	; 0x3728 <INT1_Func+0x118>
	{
		/* decrement increment the counter */
		carsCounter--;
    362e:	80 91 be 00 	lds	r24, 0x00BE
    3632:	81 50       	subi	r24, 0x01	; 1
    3634:	80 93 be 00 	sts	0x00BE, r24
		/* open the door by servo motor */
		ServoMotor_Rotate(Degree_90);
    3638:	81 e0       	ldi	r24, 0x01	; 1
    363a:	0e 94 20 0c 	call	0x1840	; 0x1840 <ServoMotor_Rotate>
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	aa ef       	ldi	r26, 0xFA	; 250
    3644:	b4 e4       	ldi	r27, 0x44	; 68
    3646:	8b 87       	std	Y+11, r24	; 0x0b
    3648:	9c 87       	std	Y+12, r25	; 0x0c
    364a:	ad 87       	std	Y+13, r26	; 0x0d
    364c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    364e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3650:	7c 85       	ldd	r23, Y+12	; 0x0c
    3652:	8d 85       	ldd	r24, Y+13	; 0x0d
    3654:	9e 85       	ldd	r25, Y+14	; 0x0e
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	4a e7       	ldi	r20, 0x7A	; 122
    365c:	55 e4       	ldi	r21, 0x45	; 69
    365e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	8f 83       	std	Y+7, r24	; 0x07
    3668:	98 87       	std	Y+8, r25	; 0x08
    366a:	a9 87       	std	Y+9, r26	; 0x09
    366c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    366e:	6f 81       	ldd	r22, Y+7	; 0x07
    3670:	78 85       	ldd	r23, Y+8	; 0x08
    3672:	89 85       	ldd	r24, Y+9	; 0x09
    3674:	9a 85       	ldd	r25, Y+10	; 0x0a
    3676:	20 e0       	ldi	r18, 0x00	; 0
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	40 e8       	ldi	r20, 0x80	; 128
    367c:	5f e3       	ldi	r21, 0x3F	; 63
    367e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3682:	88 23       	and	r24, r24
    3684:	2c f4       	brge	.+10     	; 0x3690 <INT1_Func+0x80>
		__ticks = 1;
    3686:	81 e0       	ldi	r24, 0x01	; 1
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	9e 83       	std	Y+6, r25	; 0x06
    368c:	8d 83       	std	Y+5, r24	; 0x05
    368e:	3f c0       	rjmp	.+126    	; 0x370e <INT1_Func+0xfe>
	else if (__tmp > 65535)
    3690:	6f 81       	ldd	r22, Y+7	; 0x07
    3692:	78 85       	ldd	r23, Y+8	; 0x08
    3694:	89 85       	ldd	r24, Y+9	; 0x09
    3696:	9a 85       	ldd	r25, Y+10	; 0x0a
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	3f ef       	ldi	r19, 0xFF	; 255
    369c:	4f e7       	ldi	r20, 0x7F	; 127
    369e:	57 e4       	ldi	r21, 0x47	; 71
    36a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36a4:	18 16       	cp	r1, r24
    36a6:	4c f5       	brge	.+82     	; 0x36fa <INT1_Func+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    36ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	40 e2       	ldi	r20, 0x20	; 32
    36b6:	51 e4       	ldi	r21, 0x41	; 65
    36b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36bc:	dc 01       	movw	r26, r24
    36be:	cb 01       	movw	r24, r22
    36c0:	bc 01       	movw	r22, r24
    36c2:	cd 01       	movw	r24, r26
    36c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c8:	dc 01       	movw	r26, r24
    36ca:	cb 01       	movw	r24, r22
    36cc:	9e 83       	std	Y+6, r25	; 0x06
    36ce:	8d 83       	std	Y+5, r24	; 0x05
    36d0:	0f c0       	rjmp	.+30     	; 0x36f0 <INT1_Func+0xe0>
    36d2:	80 e9       	ldi	r24, 0x90	; 144
    36d4:	91 e0       	ldi	r25, 0x01	; 1
    36d6:	9c 83       	std	Y+4, r25	; 0x04
    36d8:	8b 83       	std	Y+3, r24	; 0x03
    36da:	8b 81       	ldd	r24, Y+3	; 0x03
    36dc:	9c 81       	ldd	r25, Y+4	; 0x04
    36de:	01 97       	sbiw	r24, 0x01	; 1
    36e0:	f1 f7       	brne	.-4      	; 0x36de <INT1_Func+0xce>
    36e2:	9c 83       	std	Y+4, r25	; 0x04
    36e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36e6:	8d 81       	ldd	r24, Y+5	; 0x05
    36e8:	9e 81       	ldd	r25, Y+6	; 0x06
    36ea:	01 97       	sbiw	r24, 0x01	; 1
    36ec:	9e 83       	std	Y+6, r25	; 0x06
    36ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36f0:	8d 81       	ldd	r24, Y+5	; 0x05
    36f2:	9e 81       	ldd	r25, Y+6	; 0x06
    36f4:	00 97       	sbiw	r24, 0x00	; 0
    36f6:	69 f7       	brne	.-38     	; 0x36d2 <INT1_Func+0xc2>
    36f8:	14 c0       	rjmp	.+40     	; 0x3722 <INT1_Func+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36fa:	6f 81       	ldd	r22, Y+7	; 0x07
    36fc:	78 85       	ldd	r23, Y+8	; 0x08
    36fe:	89 85       	ldd	r24, Y+9	; 0x09
    3700:	9a 85       	ldd	r25, Y+10	; 0x0a
    3702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3706:	dc 01       	movw	r26, r24
    3708:	cb 01       	movw	r24, r22
    370a:	9e 83       	std	Y+6, r25	; 0x06
    370c:	8d 83       	std	Y+5, r24	; 0x05
    370e:	8d 81       	ldd	r24, Y+5	; 0x05
    3710:	9e 81       	ldd	r25, Y+6	; 0x06
    3712:	9a 83       	std	Y+2, r25	; 0x02
    3714:	89 83       	std	Y+1, r24	; 0x01
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	9a 81       	ldd	r25, Y+2	; 0x02
    371a:	01 97       	sbiw	r24, 0x01	; 1
    371c:	f1 f7       	brne	.-4      	; 0x371a <INT1_Func+0x10a>
    371e:	9a 83       	std	Y+2, r25	; 0x02
    3720:	89 83       	std	Y+1, r24	; 0x01
		/* wait 2 seconds */
		_delay_ms(2000);
		/* close the door by servo motor */
		ServoMotor_Rotate(Degree_0);
    3722:	80 e0       	ldi	r24, 0x00	; 0
    3724:	0e 94 20 0c 	call	0x1840	; 0x1840 <ServoMotor_Rotate>
	}
}
    3728:	2e 96       	adiw	r28, 0x0e	; 14
    372a:	0f b6       	in	r0, 0x3f	; 63
    372c:	f8 94       	cli
    372e:	de bf       	out	0x3e, r29	; 62
    3730:	0f be       	out	0x3f, r0	; 63
    3732:	cd bf       	out	0x3d, r28	; 61
    3734:	cf 91       	pop	r28
    3736:	df 91       	pop	r29
    3738:	08 95       	ret

0000373a <__prologue_saves__>:
    373a:	2f 92       	push	r2
    373c:	3f 92       	push	r3
    373e:	4f 92       	push	r4
    3740:	5f 92       	push	r5
    3742:	6f 92       	push	r6
    3744:	7f 92       	push	r7
    3746:	8f 92       	push	r8
    3748:	9f 92       	push	r9
    374a:	af 92       	push	r10
    374c:	bf 92       	push	r11
    374e:	cf 92       	push	r12
    3750:	df 92       	push	r13
    3752:	ef 92       	push	r14
    3754:	ff 92       	push	r15
    3756:	0f 93       	push	r16
    3758:	1f 93       	push	r17
    375a:	cf 93       	push	r28
    375c:	df 93       	push	r29
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	ca 1b       	sub	r28, r26
    3764:	db 0b       	sbc	r29, r27
    3766:	0f b6       	in	r0, 0x3f	; 63
    3768:	f8 94       	cli
    376a:	de bf       	out	0x3e, r29	; 62
    376c:	0f be       	out	0x3f, r0	; 63
    376e:	cd bf       	out	0x3d, r28	; 61
    3770:	09 94       	ijmp

00003772 <__epilogue_restores__>:
    3772:	2a 88       	ldd	r2, Y+18	; 0x12
    3774:	39 88       	ldd	r3, Y+17	; 0x11
    3776:	48 88       	ldd	r4, Y+16	; 0x10
    3778:	5f 84       	ldd	r5, Y+15	; 0x0f
    377a:	6e 84       	ldd	r6, Y+14	; 0x0e
    377c:	7d 84       	ldd	r7, Y+13	; 0x0d
    377e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3780:	9b 84       	ldd	r9, Y+11	; 0x0b
    3782:	aa 84       	ldd	r10, Y+10	; 0x0a
    3784:	b9 84       	ldd	r11, Y+9	; 0x09
    3786:	c8 84       	ldd	r12, Y+8	; 0x08
    3788:	df 80       	ldd	r13, Y+7	; 0x07
    378a:	ee 80       	ldd	r14, Y+6	; 0x06
    378c:	fd 80       	ldd	r15, Y+5	; 0x05
    378e:	0c 81       	ldd	r16, Y+4	; 0x04
    3790:	1b 81       	ldd	r17, Y+3	; 0x03
    3792:	aa 81       	ldd	r26, Y+2	; 0x02
    3794:	b9 81       	ldd	r27, Y+1	; 0x01
    3796:	ce 0f       	add	r28, r30
    3798:	d1 1d       	adc	r29, r1
    379a:	0f b6       	in	r0, 0x3f	; 63
    379c:	f8 94       	cli
    379e:	de bf       	out	0x3e, r29	; 62
    37a0:	0f be       	out	0x3f, r0	; 63
    37a2:	cd bf       	out	0x3d, r28	; 61
    37a4:	ed 01       	movw	r28, r26
    37a6:	08 95       	ret

000037a8 <itoa>:
    37a8:	fb 01       	movw	r30, r22
    37aa:	9f 01       	movw	r18, r30
    37ac:	e8 94       	clt
    37ae:	42 30       	cpi	r20, 0x02	; 2
    37b0:	c4 f0       	brlt	.+48     	; 0x37e2 <itoa+0x3a>
    37b2:	45 32       	cpi	r20, 0x25	; 37
    37b4:	b4 f4       	brge	.+44     	; 0x37e2 <itoa+0x3a>
    37b6:	4a 30       	cpi	r20, 0x0A	; 10
    37b8:	29 f4       	brne	.+10     	; 0x37c4 <itoa+0x1c>
    37ba:	97 fb       	bst	r25, 7
    37bc:	1e f4       	brtc	.+6      	; 0x37c4 <itoa+0x1c>
    37be:	90 95       	com	r25
    37c0:	81 95       	neg	r24
    37c2:	9f 4f       	sbci	r25, 0xFF	; 255
    37c4:	64 2f       	mov	r22, r20
    37c6:	77 27       	eor	r23, r23
    37c8:	0e 94 05 1c 	call	0x380a	; 0x380a <__udivmodhi4>
    37cc:	80 5d       	subi	r24, 0xD0	; 208
    37ce:	8a 33       	cpi	r24, 0x3A	; 58
    37d0:	0c f0       	brlt	.+2      	; 0x37d4 <itoa+0x2c>
    37d2:	89 5d       	subi	r24, 0xD9	; 217
    37d4:	81 93       	st	Z+, r24
    37d6:	cb 01       	movw	r24, r22
    37d8:	00 97       	sbiw	r24, 0x00	; 0
    37da:	a1 f7       	brne	.-24     	; 0x37c4 <itoa+0x1c>
    37dc:	16 f4       	brtc	.+4      	; 0x37e2 <itoa+0x3a>
    37de:	5d e2       	ldi	r21, 0x2D	; 45
    37e0:	51 93       	st	Z+, r21
    37e2:	10 82       	st	Z, r1
    37e4:	c9 01       	movw	r24, r18
    37e6:	0c 94 f5 1b 	jmp	0x37ea	; 0x37ea <strrev>

000037ea <strrev>:
    37ea:	dc 01       	movw	r26, r24
    37ec:	fc 01       	movw	r30, r24
    37ee:	67 2f       	mov	r22, r23
    37f0:	71 91       	ld	r23, Z+
    37f2:	77 23       	and	r23, r23
    37f4:	e1 f7       	brne	.-8      	; 0x37ee <strrev+0x4>
    37f6:	32 97       	sbiw	r30, 0x02	; 2
    37f8:	04 c0       	rjmp	.+8      	; 0x3802 <strrev+0x18>
    37fa:	7c 91       	ld	r23, X
    37fc:	6d 93       	st	X+, r22
    37fe:	70 83       	st	Z, r23
    3800:	62 91       	ld	r22, -Z
    3802:	ae 17       	cp	r26, r30
    3804:	bf 07       	cpc	r27, r31
    3806:	c8 f3       	brcs	.-14     	; 0x37fa <strrev+0x10>
    3808:	08 95       	ret

0000380a <__udivmodhi4>:
    380a:	aa 1b       	sub	r26, r26
    380c:	bb 1b       	sub	r27, r27
    380e:	51 e1       	ldi	r21, 0x11	; 17
    3810:	07 c0       	rjmp	.+14     	; 0x3820 <__udivmodhi4_ep>

00003812 <__udivmodhi4_loop>:
    3812:	aa 1f       	adc	r26, r26
    3814:	bb 1f       	adc	r27, r27
    3816:	a6 17       	cp	r26, r22
    3818:	b7 07       	cpc	r27, r23
    381a:	10 f0       	brcs	.+4      	; 0x3820 <__udivmodhi4_ep>
    381c:	a6 1b       	sub	r26, r22
    381e:	b7 0b       	sbc	r27, r23

00003820 <__udivmodhi4_ep>:
    3820:	88 1f       	adc	r24, r24
    3822:	99 1f       	adc	r25, r25
    3824:	5a 95       	dec	r21
    3826:	a9 f7       	brne	.-22     	; 0x3812 <__udivmodhi4_loop>
    3828:	80 95       	com	r24
    382a:	90 95       	com	r25
    382c:	bc 01       	movw	r22, r24
    382e:	cd 01       	movw	r24, r26
    3830:	08 95       	ret

00003832 <_exit>:
    3832:	f8 94       	cli

00003834 <__stop_program>:
    3834:	ff cf       	rjmp	.-2      	; 0x3834 <__stop_program>
